{
  "address": "0xB42b6784B89728eB38DBef3C4e1e97a2DB3BEb18",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_toTokenId",
          "type": "uint256"
        }
      ],
      "name": "BatchMetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "MetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PurchaseNFT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Bid",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "addAvailableToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "airdropNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "auctions",
      "outputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minBid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "highestBid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "highestBidder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "availableTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burnNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyMysteryBox",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "buyNFT",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signatureSeller",
          "type": "bytes"
        }
      ],
      "name": "buyNFTWithMultiSig",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signatureSeller",
          "type": "bytes"
        }
      ],
      "name": "buyNFTWithNonce",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "claimLoyaltyReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minBid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "createAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalShares",
          "type": "uint256"
        }
      ],
      "name": "createFractionalNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rentPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "createRental",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "endAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "endRental",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "fractionalOwnerships",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalShares",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenRarity",
      "outputs": [
        {
          "internalType": "enum YourCollectible.Rarity",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenTransactionHistory",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "buyer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct YourCollectible.TransactionHistory[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTotalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "giftNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "holdingStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "loyaltyPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "loyaltyRewardClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "uris",
          "type": "string[]"
        }
      ],
      "name": "mintBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "mintItem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mysteryBoxPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "profitSharingAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "profitSharingPercentages",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "purchase",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "rentNFT",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rentals",
      "outputs": [
        {
          "internalType": "address",
          "name": "renter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rentPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPeriod",
          "type": "uint256"
        }
      ],
      "name": "setLoyaltyPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "setMysteryBoxPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "percentages",
          "type": "uint256[]"
        }
      ],
      "name": "setProfitSharing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "percentage",
          "type": "uint256"
        }
      ],
      "name": "setRoyaltyPercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "enum YourCollectible.Rarity",
          "name": "rarity",
          "type": "uint8"
        }
      ],
      "name": "setTokenRarity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minBid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "auctionDuration",
          "type": "uint256"
        }
      ],
      "name": "startAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenIdCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenRarities",
      "outputs": [
        {
          "internalType": "enum YourCollectible.Rarity",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenTransactionHistory",
      "outputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "transferShares",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdc68a74d664fb7952d7bcd762a481598ae467f78fb7adbe3819ef69c97228146",
  "receipt": {
    "to": null,
    "from": "0x8beB99d54a7aD698aFf0eD32888522535ffD1fE2",
    "contractAddress": "0xB42b6784B89728eB38DBef3C4e1e97a2DB3BEb18",
    "transactionIndex": 76,
    "gasUsed": "4507703",
    "logsBloom": "0x00000000400000000800000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000900000000000000000000000000000000410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000040000000000000000000000000000000000000000000000000000",
    "blockHash": "0xcd79358917bee4bbb9d003ba365d96be25b12d4f9a56a083b93dd63a5fee9a57",
    "transactionHash": "0xdc68a74d664fb7952d7bcd762a481598ae467f78fb7adbe3819ef69c97228146",
    "logs": [
      {
        "transactionIndex": 76,
        "blockNumber": 7262944,
        "transactionHash": "0xdc68a74d664fb7952d7bcd762a481598ae467f78fb7adbe3819ef69c97228146",
        "address": "0xB42b6784B89728eB38DBef3C4e1e97a2DB3BEb18",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008beb99d54a7ad698aff0ed32888522535ffd1fe2"
        ],
        "data": "0x",
        "logIndex": 206,
        "blockHash": "0xcd79358917bee4bbb9d003ba365d96be25b12d4f9a56a083b93dd63a5fee9a57"
      }
    ],
    "blockNumber": 7262944,
    "cumulativeGasUsed": "13046848",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "82c87454515442e8da36022a6e07a5d9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PurchaseNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Bid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"addAvailableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"airdropNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"highestBid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"highestBidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"availableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burnNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMysteryBox\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buyNFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signatureSeller\",\"type\":\"bytes\"}],\"name\":\"buyNFTWithMultiSig\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signatureSeller\",\"type\":\"bytes\"}],\"name\":\"buyNFTWithNonce\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claimLoyaltyReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"createAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"}],\"name\":\"createFractionalNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rentPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"createRental\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"endAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"endRental\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fractionalOwnerships\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenRarity\",\"outputs\":[{\"internalType\":\"enum YourCollectible.Rarity\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenTransactionHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct YourCollectible.TransactionHistory[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTotalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"giftNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holdingStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loyaltyPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"loyaltyRewardClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"uris\",\"type\":\"string[]\"}],\"name\":\"mintBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"mintItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mysteryBoxPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"profitSharingAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"profitSharingPercentages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"rentNFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rentals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"renter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rentPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"}],\"name\":\"setLoyaltyPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setMysteryBoxPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"percentages\",\"type\":\"uint256[]\"}],\"name\":\"setProfitSharing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"setRoyaltyPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum YourCollectible.Rarity\",\"name\":\"rarity\",\"type\":\"uint8\"}],\"name\":\"setTokenRarity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDuration\",\"type\":\"uint256\"}],\"name\":\"startAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIdCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenRarities\",\"outputs\":[{\"internalType\":\"enum YourCollectible.Rarity\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenTransactionHistory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"transferShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/YourCollectible.sol\":\"YourCollectible\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0x2a9dadb806be80dd451821f1f1190eb9aa6f6edae85b185db29d60767cc0c5f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xa8796bd16014cefb8c26449413981a49c510f92a98d6828494f5fd046223ced3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../interfaces/IERC4906.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == bytes4(0x49064906) || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n\\n        emit MetadataUpdate(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7942989e3525aec1672469e4c65fb33fbd19c785c9cadbcb70fcbe1fe8bfdd37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/YourCollectible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\"; // \\u5f15\\u5165 ECDSA \\u5e93\\r\\n\\r\\ncontract YourCollectible is ERC721, ERC721Enumerable, ERC721URIStorage, Ownable {\\r\\n    using Counters for Counters.Counter;\\r\\n    using ECDSA for bytes32;\\r\\n\\r\\n    Counters.Counter public tokenIdCounter; // \\u7528\\u4e8e\\u8ddf\\u8e2a\\u4ee4\\u724c ID \\u7684\\u8ba1\\u6570\\u5668\\r\\n    mapping(uint256 => uint256) public tokenPrices; // \\u7528\\u4e8e\\u5b58\\u50a8\\u4ee4\\u724c\\u4ef7\\u683c\\u7684\\u6620\\u5c04\\r\\n    mapping(bytes32 => bool) private usedHashes; // \\u7528\\u4e8e\\u8bb0\\u5f55\\u5df2\\u7ecf\\u4f7f\\u7528\\u8fc7\\u7684\\u4ea4\\u6613\\u54c8\\u5e0c\\r\\n    mapping(uint256 => uint256) public nonces; // \\u7528\\u4e8e\\u8bb0\\u5f55\\u6bcf\\u4e2aNFT\\u7684 nonce \\u503c\\r\\n\\tmapping(uint256 => address) private _creators; // \\u5b58\\u50a8\\u6bcf\\u4e2atokenId\\u7684\\u521b\\u4f5c\\u8005\\u5730\\u5740\\r\\n\\tuint256 public royaltyPercentage = 5; // \\u7248\\u7a0e\\u767e\\u5206\\u6bd4\\uff0c\\u9ed8\\u8ba4\\u8bbe\\u7f6e\\u4e3a5%\\r\\n\\tmapping(uint256 => TransactionHistory[]) public tokenTransactionHistory; // \\u6bcf\\u4e2a tokenId \\u5bf9\\u5e94\\u7684\\u4ea4\\u6613\\u5386\\u53f2\\u8bb0\\u5f55\\r\\n\\r\\n\\t//\\u76f2\\u76d2\\u5408\\u7ea6\\uff086.sol\\uff09\\r\\n\\tuint256 public mysteryBoxPrice = 0.1 ether; // \\u76f2\\u76d2\\u4ef7\\u683c\\r\\n\\tuint256[] public availableTokens; // \\u53ef\\u4f9b\\u9009\\u62e9\\u7684NFT tokenId\\u5217\\u8868\\r\\n\\r\\n  //NFT\\u7684\\u5fe0\\u8bda\\u5ea6\\u5408\\u7ea6\\uff0813.sol\\uff09\\r\\n\\tmapping(uint256 => uint256) public holdingStartTime; // \\u6301\\u6709NFT\\u7684\\u5f00\\u59cb\\u65f6\\u95f4\\r\\n\\tmapping(uint256 => bool) public loyaltyRewardClaimed; // \\u662f\\u5426\\u5df2\\u9886\\u53d6\\u5fe0\\u8bda\\u5ea6\\u5956\\u52b1\\r\\n\\tuint256 public loyaltyPeriod = 30 days; // \\u5fe0\\u8bda\\u5ea6\\u5956\\u52b1\\u7684\\u6301\\u6709\\u671f\\r\\n\\r\\n   //NFT\\u7684\\u5206\\u7ea2\\u5408\\u7ea6\\uff0814.sol\\uff09\\r\\n\\taddress[] public profitSharingAddresses; // \\u6536\\u76ca\\u5206\\u4eab\\u5730\\u5740\\r\\n\\tuint256[] public profitSharingPercentages; // \\u6536\\u76ca\\u5206\\u4eab\\u6bd4\\u4f8b\\uff08\\u4ee5\\u767e\\u5206\\u6bd4\\u8868\\u793a\\uff0c100\\u4e3a\\u6700\\u5927\\uff09\\r\\n\\r\\n    event PurchaseNFT(uint256 indexed tokenId, address indexed buyer, address indexed seller, uint256 price, uint256 timestamp);\\r\\n\\r\\n    constructor() ERC721(\\\"YourCollectible\\\", \\\"LYJ\\\") {}\\r\\n\\r\\n    // \\u94f8\\u9020NFT\\r\\n    function mintItem(address to, string memory uri) public returns (uint256) {\\r\\n        tokenIdCounter.increment(); // \\u589e\\u52a0NFT ID\\r\\n        uint256 tokenId = tokenIdCounter.current(); // \\u83b7\\u53d6\\u5f53\\u524d\\u7684NFT ID\\r\\n        _safeMint(to, tokenId); // \\u5b89\\u5168\\u5730\\u94f8\\u9020NFT\\r\\n        _setTokenURI(tokenId, uri); // \\u8bbe\\u7f6eNFT URI\\r\\n        return tokenId; // \\u8fd4\\u56deNFT ID\\r\\n    }\\r\\n\\r\\n    // \\u8986\\u76d6 _baseURI \\u51fd\\u6570\\uff0c\\u8fd4\\u56de\\u4e00\\u4e2a\\u7a7a\\u5b57\\u7b26\\u4e32\\r\\n    function _baseURI() internal pure override returns (string memory) {\\r\\n        return \\\"\\\";\\r\\n    }\\r\\n\\r\\n  // \\u4f7f\\u7528\\u591a\\u91cd\\u7b7e\\u540d\\u548c\\u65f6\\u95f4\\u6233\\u8d2d\\u4e70NFT\\r\\n    function buyNFTWithMultiSig(\\r\\n        uint256 tokenId,\\r\\n        uint256 price,\\r\\n        uint256 timestamp,\\r\\n        bytes memory signatureSeller\\r\\n    ) public payable {\\r\\n        require(tokenPrices[tokenId] == price, \\\"Price does not match the listed price\\\");\\r\\n        require(block.timestamp <= timestamp + 10 minutes, \\\"Transaction has expired\\\");\\r\\n        \\r\\n        address seller = ownerOf(tokenId);\\r\\n        bytes32 hash = keccak256(abi.encodePacked(tokenId, price, msg.sender, seller, timestamp));\\r\\n        \\r\\n        // \\u68c0\\u67e5hash\\u662f\\u5426\\u5df2\\u88ab\\u4f7f\\u7528\\r\\n        require(!usedHashes[hash], \\\"Transaction already processed\\\");\\r\\n        \\r\\n        // \\u9a8c\\u8bc1\\u5356\\u5bb6\\u7b7e\\u540d\\r\\n        require(_verify(hash, signatureSeller, seller), \\\"Invalid seller signature\\\");\\r\\n        \\r\\n        require(msg.value == price, \\\"Incorrect price sent\\\");\\r\\n        \\r\\n        // \\u5b8c\\u6210NFT\\u8f6c\\u79fb\\r\\n        _transfer(seller, msg.sender, tokenId);\\r\\n        \\r\\n        // \\u5c06\\u4ea4\\u6613\\u8d44\\u91d1\\u53d1\\u9001\\u7ed9\\u5356\\u5bb6\\r\\n        payable(seller).transfer(msg.value);\\r\\n        \\r\\n        // \\u66f4\\u65b0\\u5df2\\u4f7f\\u7528\\u7684hash\\r\\n        usedHashes[hash] = true;\\r\\n        \\r\\n        // \\u8bb0\\u5f55\\u4ea4\\u6613\\u4e8b\\u4ef6\\r\\n        emit PurchaseNFT(tokenId, msg.sender, seller, price, block.timestamp);\\r\\n    }\\r\\n// \\u4f7f\\u7528\\u968f\\u673a\\u6570\\uff08nonce\\uff09\\u548c\\u591a\\u91cd\\u7b7e\\u540d\\u8d2d\\u4e70NFT\\r\\n    function buyNFTWithNonce(\\r\\n        uint256 tokenId,\\r\\n        uint256 price,\\r\\n        uint256 timestamp,\\r\\n        uint256 nonce,\\r\\n        bytes memory signatureSeller\\r\\n    ) public payable {\\r\\n        require(tokenPrices[tokenId] == price, \\\"Price does not match the listed price\\\");\\r\\n        require(block.timestamp <= timestamp + 10 minutes, \\\"Transaction has expired\\\");\\r\\n        \\r\\n        address seller = ownerOf(tokenId);\\r\\n        bytes32 hash = keccak256(abi.encodePacked(tokenId, price, msg.sender, seller, timestamp, nonce));\\r\\n\\r\\n        // \\u68c0\\u67e5hash\\u662f\\u5426\\u5df2\\u88ab\\u4f7f\\u7528\\r\\n        require(!usedHashes[hash], \\\"Transaction already processed\\\");\\r\\n        // \\u786e\\u4fddnonce\\u5339\\u914d\\r\\n        require(nonce == nonces[tokenId], \\\"Nonce does not match\\\");\\r\\n\\r\\n        // \\u9a8c\\u8bc1\\u5356\\u5bb6\\u7b7e\\u540d\\r\\n        require(_verify(hash, signatureSeller, seller), \\\"Invalid seller signature\\\");\\r\\n\\r\\n        require(msg.value == price, \\\"Incorrect price sent\\\");\\r\\n\\r\\n        // \\u5b8c\\u6210NFT\\u8f6c\\u79fb\\r\\n        _transfer(seller, msg.sender, tokenId);\\r\\n\\r\\n        // \\u5c06\\u4ea4\\u6613\\u8d44\\u91d1\\u53d1\\u9001\\u7ed9\\u5356\\u5bb6\\r\\n        payable(seller).transfer(msg.value);\\r\\n\\r\\n        // \\u66f4\\u65b0nonce\\u548chash\\r\\n        nonces[tokenId]++; // \\u66f4\\u65b0NFT\\u7684nonce\\r\\n        usedHashes[hash] = true;\\r\\n\\r\\n        // \\u8bb0\\u5f55\\u4ea4\\u6613\\u4e8b\\u4ef6\\r\\n        emit PurchaseNFT(tokenId, msg.sender, seller, price, block.timestamp);\\r\\n    }\\r\\n\\r\\n    // \\u9a8c\\u8bc1\\u7b7e\\u540d\\r\\n    function _verify(bytes32 hash, bytes memory signature, address signer) internal pure returns (bool) {\\r\\n        return hash.toEthSignedMessageHash().recover(signature) == signer;\\r\\n    }\\r\\n // \\u8986\\u76d6 ERC721 \\u6807\\u51c6\\u7684\\u90e8\\u5206\\u51fd\\u6570\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        uint256 batchSize\\r\\n    ) internal override(ERC721, ERC721Enumerable) {\\r\\n        super._beforeTokenTransfer(from, to, tokenId, batchSize);\\r\\n    }\\r\\n\\r\\n    function _burn(uint256 tokenId) internal override(ERC721URIStorage, ERC721) {\\r\\n        super._burn(tokenId);\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId) public view override(ERC721URIStorage, ERC721) returns (string memory) {\\r\\n        return super.tokenURI(tokenId);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId) public view override(ERC721, ERC721Enumerable, ERC721URIStorage) returns (bool) {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n    // \\u8d2d\\u4e70\\u65b9\\u6cd5\\uff08\\u4e0d\\u4f7f\\u7528nonce\\uff09\\r\\n    function purchase(\\r\\n        uint256 tokenId,\\r\\n        address from,\\r\\n        uint256 price\\r\\n    ) public payable {\\r\\n        require(_exists(tokenId), \\\"Token does not exist\\\"); // \\u786e\\u4fdd\\u4ee4\\u724c\\u5b58\\u5728\\r\\n        require(from == ownerOf(tokenId), \\\"From address is not the owner\\\"); // \\u786e\\u4fdd from \\u5730\\u5740\\u662f\\u4ee4\\u724c\\u7684\\u6240\\u6709\\u8005\\r\\n        require(msg.value == price, \\\"Incorrect price\\\"); // \\u786e\\u4fdd\\u53d1\\u9001\\u7684\\u4ee5\\u592a\\u5e01\\u6570\\u91cf\\u4e0e\\u4ef7\\u683c\\u76f8\\u7b26\\r\\n\\r\\n        // \\u5c06\\u4ef7\\u683c\\u8f6c\\u79fb\\u7ed9\\u5356\\u5bb6\\r\\n        payable(from).transfer(price);\\r\\n\\r\\n        // \\u8f6c\\u79fb\\u4ee4\\u724c\\r\\n        _transfer(from, msg.sender, tokenId);\\r\\n    }\\r\\n\\r\\n   //NFT\\u7684\\u7a00\\u6709\\u5ea6\\u5408\\u7ea6\\uff0811.sol\\uff09\\r\\n\\tenum Rarity {\\r\\n\\t\\tCommon,\\r\\n\\t\\tRare,\\r\\n\\t\\tEpic,\\r\\n\\t\\tLegendary\\r\\n\\t} //\\u679a\\u4e3e\\u7c7b\\u578b \\uff0c\\u8868\\u793a\\u7a00\\u6709\\u5ea6 \\u666e\\u901a \\u7a00\\u6709 \\u53f2\\u8bd7 \\u4f20\\u5947\\r\\n\\tmapping(uint256 => Rarity) public tokenRarities; // tokenId \\u5bf9\\u5e94\\u7684\\u7a00\\u6709\\u5ea6\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n//\\u4ea4\\u6613\\u5386\\u53f2\\u8bb0\\u5f55\\u5408\\u7ea6\\uff082.sol\\uff09\\r\\n\\tstruct TransactionHistory {\\r\\n\\t\\taddress seller;\\r\\n\\t\\taddress buyer;\\r\\n\\t\\tuint256 price;\\r\\n\\t\\tuint256 timestamp;\\r\\n\\t}\\r\\n\\t//\\u62cd\\u5356\\u5408\\u7ea6\\uff083.sol\\uff09\\r\\n\\t\\tstruct Auction {\\r\\n\\t\\taddress seller;\\r\\n\\t\\tuint256 tokenId;\\r\\n\\t\\tuint256 minBid;\\r\\n\\t\\tuint256 highestBid;\\r\\n\\t\\taddress highestBidder;\\r\\n\\t\\tuint256 endTime;\\r\\n\\t\\tbool active;\\r\\n\\t}\\r\\n\\tmapping(uint256 => Auction) public auctions; // \\u6bcf\\u4e2a tokenId \\u5bf9\\u5e94\\u7684\\u62cd\\u5356\\u4fe1\\u606f\\r\\n\\r\\n\\r\\n//\\u79df\\u8d41\\u5408\\u7ea6(4.sol)\\r\\n\\tstruct Rental {\\r\\n\\t\\taddress renter;\\r\\n\\t\\tuint256 rentPrice;\\r\\n\\t\\tuint256 startTime;\\r\\n\\t\\tuint256 duration;\\r\\n\\t\\tbool active;\\r\\n\\t}\\r\\n\\tmapping(uint256 => Rental) public rentals; // \\u6bcf\\u4e2a tokenId \\u5bf9\\u5e94\\u7684\\u79df\\u8d41\\u4fe1\\u606f\\r\\n\\r\\n//\\u788e\\u7247\\u5316\\u5408\\u7ea6\\uff085.sol\\uff09\\r\\n\\tstruct FractionalOwnership {\\r\\n\\t\\tuint256 totalShares;\\r\\n\\t\\tmapping(address => uint256) sharesOwned;\\r\\n\\t}\\r\\n\\tmapping(uint256 => FractionalOwnership) public fractionalOwnerships; // \\u6bcf\\u4e2a tokenId \\u5bf9\\u5e94\\u7684\\u788e\\u7247\\u5316\\u6240\\u6709\\u6743\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\t // \\u8986\\u76d6 buyNFT \\u51fd\\u6570\\uff0c\\u589e\\u52a0\\u7248\\u7a0e\\u652f\\u4ed8\\u903b\\u8f91\\r\\n\\tfunction buyNFT(uint256 tokenId) public payable {\\r\\n\\t\\tuint256 price = tokenPrices[tokenId];\\r\\n\\t\\trequire(price > 0, unicode\\\"\\u8be5\\u7248\\u6743\\u6216NFT\\u8fd8\\u672a\\u51fa\\u552e\\\");\\r\\n\\t\\trequire(msg.value == price, unicode\\\"\\u53d1\\u9001\\u4e86\\u9519\\u8bef\\u7684\\u4ef7\\u683c\\u6216\\u652f\\u4ed8\\u91d1\\u989d\\u4e0d\\u6b63\\u786e\\\");\\r\\n\\r\\n\\t\\taddress seller = ownerOf(tokenId);\\r\\n\\t\\taddress creator = _creators[tokenId];\\r\\n\\t\\tuint256 royaltyAmount = (msg.value * royaltyPercentage) / 100; // \\u8ba1\\u7b97\\u7248\\u7a0e\\u91d1\\u989d\\r\\n\\t\\tuint256 sellerAmount = msg.value - royaltyAmount;\\r\\n\\t\\t_transfer(seller, msg.sender, tokenId);\\r\\n\\t\\t// \\u652f\\u4ed8\\u7ed9\\u521b\\u4f5c\\u8005\\u7248\\u7a0e\\r\\n\\t\\tpayable(creator).transfer(royaltyAmount);\\r\\n\\t\\t// \\u5269\\u4f59\\u91d1\\u989d\\u652f\\u4ed8\\u7ed9\\u5356\\u5bb6\\r\\n\\t\\tpayable(seller).transfer(sellerAmount);\\r\\n\\r\\n\\t\\t// \\u5206\\u7ea2\\u903b\\u8f91\\r\\n\\t\\tdistributeProfits(msg.value);\\r\\n\\t\\t//\\u5386\\u53f2\\u4ea4\\u6613\\u8bb0\\u5f55\\u903b\\u8f91\\r\\n\\t\\t// \\u8bb0\\u5f55\\u4ea4\\u6613\\u5386\\u53f2\\r\\n\\t\\ttokenTransactionHistory[tokenId].push(\\r\\n\\t\\t\\tTransactionHistory({\\r\\n\\t\\t\\t\\tseller: seller,\\r\\n\\t\\t\\t\\tbuyer: msg.sender,\\r\\n\\t\\t\\t\\tprice: msg.value,\\r\\n\\t\\t\\t\\ttimestamp: block.timestamp\\r\\n\\t\\t\\t})\\r\\n\\t\\t);\\r\\n       // \\u652f\\u4ed8\\u5356\\u5bb6\\r\\n\\t\\tpayable(seller).transfer(msg.value);\\r\\n\\t\\t//\\u91cd\\u7f6e\\u4ee4\\u724c\\u4ef7\\u683c\\r\\n\\t\\ttokenPrices[tokenId] = 0;\\r\\n\\t}\\r\\n\\t\\t// \\u4fee\\u6539\\u7248\\u7a0e\\u767e\\u5206\\u6bd4\\r\\n\\tfunction setRoyaltyPercentage(uint256 percentage) public onlyOwner {\\r\\n\\t\\troyaltyPercentage = percentage;\\r\\n\\t}\\r\\n\\r\\n\\t// \\u67e5\\u8be2\\u6307\\u5b9aNFT\\u7684\\u4ea4\\u6613\\u5386\\u53f2\\u8bb0\\u5f55\\r\\n\\tfunction getTokenTransactionHistory(\\r\\n\\t\\tuint256 tokenId\\r\\n\\t) public view returns (TransactionHistory[] memory) {\\r\\n\\t\\treturn tokenTransactionHistory[tokenId];\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\t// \\u521b\\u5efa\\u62cd\\u5356\\r\\n\\tfunction createAuction(\\r\\n\\t\\tuint256 tokenId,\\r\\n\\t\\tuint256 minBid,\\r\\n\\t\\tuint256 duration\\r\\n\\t) public {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\townerOf(tokenId) == msg.sender,\\r\\n\\t\\t\\tunicode\\\"\\u53ea\\u6709\\u62e5\\u6709\\u8005\\u624d\\u80fd\\u53d1\\u8d77\\u62cd\\u5356\\\"\\r\\n\\t\\t);\\r\\n\\t\\trequire(\\r\\n\\t\\t\\t!auctions[tokenId].active,\\r\\n\\t\\t\\tunicode\\\"\\u8be5\\u7248\\u6743\\u5df2\\u7ecf\\u5728\\u62cd\\u5356\\u4e2d\\\"\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tauctions[tokenId] = Auction({\\r\\n\\t\\t\\tseller: msg.sender,\\r\\n\\t\\t\\ttokenId: tokenId,\\r\\n\\t\\t\\tminBid: minBid,\\r\\n\\t\\t\\thighestBid: 0,\\r\\n\\t\\t\\thighestBidder: address(0),\\r\\n\\t\\t\\tendTime: block.timestamp + duration,\\r\\n\\t\\t\\tactive: true\\r\\n\\t\\t});\\r\\n\\t}\\r\\n\\r\\n\\t// \\u51fa\\u4ef7\\r\\n\\tfunction Bid(uint256 tokenId) public payable {\\r\\n\\t\\tAuction storage auction = auctions[tokenId];\\r\\n\\t\\trequire(auction.active, unicode\\\"\\u8be5\\u62cd\\u5356\\u4e0d\\u6d3b\\u8dc3\\\");\\r\\n\\t\\trequire(block.timestamp < auction.endTime, unicode\\\"\\u62cd\\u5356\\u5df2\\u7ed3\\u675f\\\");\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tmsg.value > auction.highestBid,\\r\\n\\t\\t\\tunicode\\\"\\u51fa\\u4ef7\\u4f4e\\u4e8e\\u5f53\\u524d\\u6700\\u9ad8\\u51fa\\u4ef7\\\"\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\t// \\u9000\\u8fd8\\u4e4b\\u524d\\u7684\\u6700\\u9ad8\\u51fa\\u4ef7\\u8005\\r\\n\\t\\tif (auction.highestBidder != address(0)) {\\r\\n\\t\\t\\tpayable(auction.highestBidder).transfer(auction.highestBid);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tauction.highestBid = msg.value;\\r\\n\\t\\tauction.highestBidder = msg.sender;\\r\\n\\t}\\r\\n  // \\u5f00\\u59cb\\u62cd\\u5356\\r\\n\\tfunction startAuction(\\r\\n\\t\\tuint256 tokenId,\\r\\n\\t\\tuint256 minBid,\\r\\n\\t\\tuint256 auctionDuration\\r\\n\\t) public {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\townerOf(tokenId) == msg.sender,\\r\\n\\t\\t\\tunicode\\\"\\u53ea\\u6709NFT\\u62e5\\u6709\\u8005\\u53ef\\u4ee5\\u53d1\\u8d77\\u62cd\\u5356\\\"\\r\\n\\t\\t);\\r\\n\\t\\trequire(\\r\\n\\t\\t\\t!auctions[tokenId].active,\\r\\n\\t\\t\\tunicode\\\"\\u8fd9\\u573aNFT\\u62cd\\u5356\\u5df2\\u88ab\\u6fc0\\u6d3b\\\"\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tauctions[tokenId] = Auction({\\r\\n\\t\\t\\tseller: msg.sender,\\r\\n\\t\\t\\ttokenId: tokenId,\\r\\n\\t\\t\\tminBid: minBid,\\r\\n\\t\\t\\thighestBid: 0,\\r\\n\\t\\t\\thighestBidder: address(0),\\r\\n\\t\\t\\tendTime: block.timestamp + auctionDuration,\\r\\n\\t\\t\\tactive: true\\r\\n\\t\\t});\\r\\n\\t}\\r\\n  // \\u7ed3\\u675f\\u62cd\\u5356\\u5e76\\u8f6c\\u79fbNFT\\r\\n\\tfunction endAuction(uint256 tokenId) public {\\r\\n\\t\\tAuction storage auction = auctions[tokenId];\\r\\n\\t\\trequire(auction.active, unicode\\\"\\u62cd\\u5356\\u5df2\\u7ed3\\u675f\\\");\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tblock.timestamp >= auction.endTime,\\r\\n\\t\\t\\tunicode\\\"\\u62cd\\u5356\\u5c1a\\u672a\\u7ed3\\u675f\\\"\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tauction.active = false;\\r\\n\\t\\tif (auction.highestBidder != address(0)) {\\r\\n\\t\\t\\t// \\u5c06NFT\\u8f6c\\u79fb\\u7ed9\\u6700\\u9ad8\\u51fa\\u4ef7\\u8005\\r\\n\\t\\t\\t_transfer(ownerOf(tokenId), auction.highestBidder, tokenId);\\r\\n\\t\\t\\t// \\u5c06\\u62cd\\u5356\\u6b3e\\u9879\\u8f6c\\u79fb\\u7ed9\\u5356\\u5bb6\\r\\n\\t\\t\\tpayable(ownerOf(tokenId)).transfer(auction.highestBid);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\t// \\u8bbe\\u7f6e\\u5206\\u7ea2\\u4fe1\\u606f\\r\\n\\tfunction setProfitSharing(\\r\\n\\t\\taddress[] memory addresses,\\r\\n\\t\\tuint256[] memory percentages\\r\\n\\t) public onlyOwner {\\r\\n\\t\\trequire(addresses.length == percentages.length, unicode\\\"\\u5730\\u5740\\u548c\\u6bd4\\u4f8b\\u957f\\u5ea6\\u4e0d\\u5339\\u914d\\\");\\r\\n\\t\\tuint256 totalPercentage = 0;\\r\\n\\t\\tfor (uint256 i = 0; i < percentages.length; i++) {\\r\\n\\t\\t\\ttotalPercentage += percentages[i];\\r\\n\\t\\t}\\r\\n\\t\\trequire(totalPercentage <= 100, unicode\\\"\\u5206\\u7ea2\\u6bd4\\u4f8b\\u603b\\u548c\\u4e0d\\u80fd\\u8d85\\u8fc7100%\\\");\\r\\n\\r\\n\\t\\tprofitSharingAddresses = addresses;\\r\\n\\t\\tprofitSharingPercentages = percentages;\\r\\n\\t}\\r\\n\\r\\n\\t// \\u5206\\u914d\\u5229\\u6da6\\r\\n\\tfunction distributeProfits(uint256 amount) internal {\\r\\n\\t\\tfor (uint256 i = 0; i < profitSharingAddresses.length; i++) {\\r\\n\\t\\t\\tuint256 share = (amount * profitSharingPercentages[i]) / 100;\\r\\n\\t\\t\\tpayable(profitSharingAddresses[i]).transfer(share);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\t\\r\\n\\r\\n\\r\\n\\r\\n  // \\u521b\\u5efa\\u79df\\u8d41\\r\\n\\tfunction createRental(\\r\\n\\t\\tuint256 tokenId,\\r\\n\\t\\tuint256 rentPrice,\\r\\n\\t\\tuint256 duration\\r\\n\\t) public {\\r\\n\\t\\trequire(ownerOf(tokenId) == msg.sender, unicode\\\"\\u53ea\\u6709NFT\\u62e5\\u6709\\u8005\\u53ef\\u4ee5\\u51fa\\u79df\\\");\\r\\n\\t\\trequire(!rentals[tokenId].active, unicode\\\"\\u8be5NFT\\u5df2\\u7ecf\\u51fa\\u79df\\\");\\r\\n\\r\\n\\t\\trentals[tokenId] = Rental({\\r\\n\\t\\t\\trenter: address(0),\\r\\n\\t\\t\\trentPrice: rentPrice,\\r\\n\\t\\t\\tstartTime: 0,\\r\\n\\t\\t\\tduration: duration,\\r\\n\\t\\t\\tactive: true\\r\\n\\t\\t});\\r\\n\\t}\\r\\n  // \\u79df\\u7528NFT\\r\\n\\tfunction rentNFT(uint256 tokenId) public payable {\\r\\n\\t\\tRental storage rental = rentals[tokenId];\\r\\n\\t\\trequire(rental.active, unicode\\\"\\u8be5NFT\\u4e0d\\u53ef\\u51fa\\u79df\\\");\\r\\n\\t\\trequire(msg.value == rental.rentPrice, unicode\\\"\\u652f\\u4ed8\\u7684\\u79df\\u91d1\\u4e0d\\u6b63\\u786e\\\");\\r\\n\\r\\n\\t\\trental.renter = msg.sender;\\r\\n\\t\\trental.startTime = block.timestamp;\\r\\n\\r\\n\\t\\t// \\u4e34\\u65f6\\u8f6c\\u79fbNFT\\u7684\\u6240\\u6709\\u6743\\u7ed9\\u79df\\u7528\\u8005\\r\\n\\t\\t_transfer(ownerOf(tokenId), msg.sender, tokenId);\\r\\n\\r\\n\\t\\t// \\u652f\\u4ed8\\u79df\\u91d1\\u7ed9NFT\\u6301\\u6709\\u8005\\r\\n\\t\\tpayable(ownerOf(tokenId)).transfer(msg.value);\\r\\n\\t}\\r\\n  // \\u7ed3\\u675f\\u79df\\u8d41\\u5e76\\u5f52\\u8fd8NFT\\r\\n\\tfunction endRental(uint256 tokenId) public {\\r\\n\\t\\tRental storage rental = rentals[tokenId];\\r\\n\\t\\trequire(rental.active, unicode\\\"\\u8be5NFT\\u672a\\u5904\\u4e8e\\u51fa\\u79df\\u72b6\\u6001\\\");\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tblock.timestamp >= rental.startTime + rental.duration,\\r\\n\\t\\t\\tunicode\\\"\\u79df\\u8d41\\u671f\\u5c1a\\u672a\\u7ed3\\u675f\\\"\\r\\n\\t\\t);\\r\\n\\t\\trequire(rental.renter != address(0), unicode\\\"\\u8be5NFT\\u672a\\u88ab\\u79df\\u8d41\\\");\\r\\n\\r\\n\\t\\t// \\u5f52\\u8fd8NFT\\u7ed9\\u6240\\u6709\\u8005\\r\\n\\t\\t_transfer(rental.renter, ownerOf(tokenId), tokenId);\\r\\n\\r\\n\\t\\t// \\u91cd\\u7f6e\\u79df\\u8d41\\u4fe1\\u606f\\r\\n\\t\\trental.renter = address(0);\\r\\n\\t\\trental.startTime = 0;\\r\\n\\t\\trental.active = false;\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\t// \\u521b\\u5efa\\u788e\\u7247\\u5316NFT\\r\\n\\tfunction createFractionalNFT(uint256 tokenId, uint256 totalShares) public {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\townerOf(tokenId) == msg.sender,\\r\\n\\t\\t\\tunicode\\\"\\u53ea\\u6709NFT\\u62e5\\u6709\\u8005\\u53ef\\u4ee5\\u8fdb\\u884c\\u788e\\u7247\\u5316\\\"\\r\\n\\t\\t);\\r\\n\\t\\trequire(totalShares > 0, unicode\\\"\\u4efd\\u989d\\u6570\\u5fc5\\u987b\\u5927\\u4e8e0\\\");\\r\\n\\r\\n\\t\\tfractionalOwnerships[tokenId].totalShares = totalShares;\\r\\n\\t\\tfractionalOwnerships[tokenId].sharesOwned[msg.sender] = totalShares;\\r\\n\\t}\\r\\n  // \\u8f6c\\u79fbNFT\\u4efd\\u989d\\r\\n\\tfunction transferShares(\\r\\n\\t\\tuint256 tokenId,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint256 shares\\r\\n\\t) public {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tfractionalOwnerships[tokenId].sharesOwned[msg.sender] >= shares,\\r\\n\\t\\t\\tunicode\\\"\\u6301\\u6709\\u4efd\\u989d\\u4e0d\\u8db3\\\"\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tfractionalOwnerships[tokenId].sharesOwned[msg.sender] -= shares;\\r\\n\\t\\tfractionalOwnerships[tokenId].sharesOwned[to] += shares;\\r\\n\\t}\\r\\n  // \\u67e5\\u8be2\\u67d0\\u5730\\u5740\\u7684\\u4efd\\u989d\\r\\n\\tfunction getShares(\\r\\n\\t\\tuint256 tokenId,\\r\\n\\t\\taddress owner\\r\\n\\t) public view returns (uint256) {\\r\\n\\t\\treturn fractionalOwnerships[tokenId].sharesOwned[owner];\\r\\n\\t}\\r\\n   // \\u83b7\\u53d6NFT\\u7684\\u603b\\u4efd\\u989d\\r\\n\\tfunction getTotalShares(uint256 tokenId) public view returns (uint256) {\\r\\n\\t\\treturn fractionalOwnerships[tokenId].totalShares;\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\t// \\u8bbe\\u7f6e\\u76f2\\u76d2\\u4ef7\\u683c\\r\\n\\tfunction setMysteryBoxPrice(uint256 price) public onlyOwner {\\r\\n\\t\\tmysteryBoxPrice = price;\\r\\n\\t}\\r\\n   // \\u6dfb\\u52a0\\u53ef\\u4f9b\\u9009\\u62e9\\u7684NFT\\r\\n\\tfunction addAvailableToken(uint256 tokenId) public onlyOwner {\\r\\n\\t\\tavailableTokens.push(tokenId);\\r\\n\\t}\\r\\n   // \\u968f\\u673a\\u4ece\\u76f2\\u76d2\\u4e2d\\u83b7\\u53d6NFT\\r\\n\\tfunction buyMysteryBox() public payable returns (uint256) {\\r\\n\\t\\trequire(msg.value == mysteryBoxPrice, unicode\\\"\\u652f\\u4ed8\\u7684\\u4ef7\\u683c\\u4e0d\\u6b63\\u786e\\\");\\r\\n\\t\\trequire(availableTokens.length > 0, unicode\\\"\\u6ca1\\u6709\\u53ef\\u7528\\u7684NFT\\\");\\r\\n\\t\\t// \\u968f\\u673a\\u9009\\u62e9\\u4e00\\u4e2aNFT\\r\\n\\t\\tuint256 randomIndex = uint256(\\r\\n\\t\\t\\tkeccak256(abi.encodePacked(block.timestamp, msg.sender))\\r\\n\\t\\t) % availableTokens.length;\\r\\n\\t\\tuint256 tokenId = availableTokens[randomIndex];\\r\\n\\t\\t// \\u4ece\\u53ef\\u7528\\u5217\\u8868\\u4e2d\\u79fb\\u9664\\u8be5NFT\\r\\n\\t\\tavailableTokens[randomIndex] = availableTokens[\\r\\n\\t\\t\\tavailableTokens.length - 1\\r\\n\\t\\t];\\r\\n\\t\\tavailableTokens.pop();\\r\\n\\t\\t// \\u5c06NFT\\u8f6c\\u79fb\\u7ed9\\u8d2d\\u4e70\\u8005\\r\\n\\t\\t_transfer(ownerOf(tokenId), msg.sender, tokenId);\\r\\n\\r\\n\\t\\treturn tokenId;\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n     //\\u94f8\\u9020\\u548c\\u9500\\u6bc1NFT\\u5408\\u7ea6(7.sol\\uff0c8.sol)\\r\\n\\t// \\u6279\\u91cf\\u94f8\\u9020NFT\\r\\n\\tfunction mintBatch(\\r\\n\\t\\taddress to,\\r\\n\\t\\tstring[] memory uris\\r\\n\\t) public returns (uint256[] memory) {\\r\\n\\t\\tuint256[] memory tokenIds = new uint256[](uris.length);\\r\\n\\r\\n\\t\\tfor (uint256 i = 0; i < uris.length; i++) {\\r\\n\\t\\t\\ttokenIds[i] = mintItem(to, uris[i]);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn tokenIds;\\r\\n\\t}\\r\\n\\r\\n\\t// \\u9500\\u6bc1NFT\\r\\n\\tfunction burnNFT(uint256 tokenId) public {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\townerOf(tokenId) == msg.sender,\\r\\n\\t\\t\\t\\\"Only NFT holders can burn NFTs\\\"\\r\\n\\t\\t);\\r\\n\\t\\t_burn(tokenId);\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    //\\u8f6c\\u8f7dNFT\\u5408\\u7ea6\\uff0810.sol\\uff09\\r\\n\\t// \\u5c06NFT\\u4f5c\\u4e3a\\u793c\\u7269\\u8d60\\u9001\\r\\n\\tfunction giftNFT(address to, uint256 tokenId) public {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\townerOf(tokenId) == msg.sender,\\r\\n\\t\\t\\tunicode\\\"\\u53ea\\u6709NFT\\u6301\\u6709\\u8005\\u53ef\\u4ee5\\u8f6c\\u589eNFT\\\"\\r\\n\\t\\t);\\r\\n\\t\\t_transfer(msg.sender, to, tokenId);\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\t// \\u8bbe\\u7f6eNFT\\u7684\\u7a00\\u6709\\u5ea6\\r\\n\\tfunction setTokenRarity(uint256 tokenId, Rarity rarity) public onlyOwner {\\r\\n\\t\\ttokenRarities[tokenId] = rarity;\\r\\n\\t}\\r\\n\\r\\n\\t// \\u83b7\\u53d6NFT\\u7684\\u7a00\\u6709\\u5ea6\\r\\n\\tfunction getTokenRarity(uint256 tokenId) public view returns (Rarity) {\\r\\n\\t\\treturn tokenRarities[tokenId];\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n//NFT\\u7684\\u7a7a\\u6295\\uff0812.sol)\\r\\n\\t// \\u7a7a\\u6295NFT\\u7ed9\\u591a\\u4e2a\\u5730\\u5740\\r\\n\\tfunction airdropNFT(\\r\\n\\t\\taddress[] memory recipients,\\r\\n\\t\\tstring memory uri\\r\\n\\t) public onlyOwner {\\r\\n\\t\\tfor (uint256 i = 0; i < recipients.length; i++) {\\r\\n\\t\\t\\tmintItem(recipients[i], uri);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\t// \\u6301\\u6709NFT\\u65f6\\u8bb0\\u5f55\\u5f00\\u59cb\\u65f6\\u95f4\\r\\n\\tfunction _transfer(\\r\\n\\t\\taddress from,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint256 tokenId\\r\\n\\t) internal override {\\r\\n\\t\\tsuper._transfer(from, to, tokenId);\\r\\n\\t\\tholdingStartTime[tokenId] = block.timestamp;\\r\\n\\t\\tloyaltyRewardClaimed[tokenId] = false; // \\u8f6c\\u79fb\\u65f6\\u91cd\\u7f6e\\u5fe0\\u8bda\\u5956\\u52b1\\u9886\\u53d6\\u72b6\\u6001\\r\\n\\t}\\r\\n\\r\\n\\t// \\u9886\\u53d6\\u5fe0\\u8bda\\u5ea6\\u5956\\u52b1\\r\\n\\tfunction claimLoyaltyReward(uint256 tokenId) public {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\townerOf(tokenId) == msg.sender,\\r\\n\\t\\t\\tunicode\\\"\\u53ea\\u6709NFT\\u6240\\u6709\\u8005\\u53ef\\u4ee5\\u9886\\u53d6\\u5956\\u52b1\\\"\\r\\n\\t\\t);\\r\\n\\t\\trequire(\\r\\n\\t\\t\\t!loyaltyRewardClaimed[tokenId],\\r\\n\\t\\t\\tunicode\\\"\\u5fe0\\u8bda\\u5ea6\\u5956\\u52b1\\u5df2\\u7ecf\\u9886\\u53d6\\\"\\r\\n\\t\\t);\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tblock.timestamp >= holdingStartTime[tokenId] + loyaltyPeriod,\\r\\n\\t\\t\\tunicode\\\"\\u6301\\u6709\\u65f6\\u95f4\\u4e0d\\u8db3\\uff0c\\u4e0d\\u80fd\\u9886\\u53d6\\u5956\\u52b1\\\"\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\t// \\u53d1\\u9001\\u5fe0\\u8bda\\u5ea6\\u5956\\u52b1 (\\u4f8b\\u5982\\uff1aERC20 \\u4ee3\\u5e01\\u6216\\u5176\\u4ed6\\u5956\\u52b1)\\r\\n\\t\\t// \\u5956\\u52b1\\u903b\\u8f91\\u53ef\\u4ee5\\u5728\\u6b64\\u5904\\u5b9e\\u73b0\\r\\n\\r\\n\\t\\tloyaltyRewardClaimed[tokenId] = true; // \\u6807\\u8bb0\\u4e3a\\u5df2\\u9886\\u53d6\\r\\n\\t}\\r\\n\\r\\n\\t// \\u8bbe\\u7f6e\\u5fe0\\u8bda\\u5ea6\\u5956\\u52b1\\u6301\\u6709\\u671f\\r\\n\\tfunction setLoyaltyPeriod(uint256 newPeriod) public onlyOwner {\\r\\n\\t\\tloyaltyPeriod = newPeriod;\\r\\n\\t}\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\",\"keccak256\":\"0x3a8f16f46f08e3e247b09be2312f8c30f6c8fd29e581ca47849ee3adfeecd1bb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600560115567016345785d8a000060135562278d006017553480156200002957600080fd5b506040518060400160405280600f81526020016e596f7572436f6c6c65637469626c6560881b81525060405180604001604052806003815260200162262ca560e91b81525081600090816200007f9190620001ac565b5060016200008e8282620001ac565b505050620000ab620000a5620000b160201b60201c565b620000b5565b62000278565b3390565b600b80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200013257607f821691505b6020821081036200015357634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001a757600081815260208120601f850160051c81016020861015620001825750805b601f850160051c820191505b81811015620001a3578281556001016200018e565b5050505b505050565b81516001600160401b03811115620001c857620001c862000107565b620001e081620001d984546200011d565b8462000159565b602080601f831160018114620002185760008415620001ff5750858301515b600019600386901b1c1916600185901b178555620001a3565b600085815260208120601f198616915b82811015620002495788860151825594840194600190910190840162000228565b5085821015620002685787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b614df280620002886000396000f3fe6080604052600436106103ce5760003560e01c806377ef8d7f116101fd578063b88d4fde11610118578063e5afe3e6116100ab578063ed0e31de1161007a578063ed0e31de14610cc0578063f20370c114610ced578063f2fde38b14610d38578063f45263dd14610d58578063f746a5ea14610d6e57600080fd5b8063e5afe3e614610c17578063e8e9cd5b14610c44578063e985e9c514610c64578063ec11baac14610cad57600080fd5b8063cabecf8c116100e7578063cabecf8c14610b97578063cc55ae6914610bb7578063cda4beef14610be4578063d91483f114610c0457600080fd5b8063b88d4fde14610b17578063b9a2de3a14610b37578063bcd7746114610b57578063c87b56dd14610b7757600080fd5b80638f4b7c3e1161019057806398bdf6f51161015f57806398bdf6f514610a35578063a22cb46514610a4c578063ad64d06814610a6c578063af94a1d114610a8c57600080fd5b80638f4b7c3e146109b357806391e078bb146109e057806395d89b4114610a0057806397491d6f14610a1557600080fd5b806384b9a6e6116101cc57806384b9a6e61461093257806385fff858146109525780638a71bb2d1461097f5780638da5cb5b1461099557600080fd5b806377ef8d7f146108bf57806378084c9d146108df5780637894505e146108ff5780637a183e841461091f57600080fd5b806343012ec2116102ed57806361ba27da116102805780636e8400501161024f5780636e8400501461081657806370a0823114610843578063715018a61461086357806375c0b9fe1461087857600080fd5b806361ba27da146107ad57806361cefff4146107cd5780636352211e146107e3578063650e5d6d1461080357600080fd5b806351ed8288116102bc57806351ed82881461069c578063555ec78b146106af578063571a26a0146106df57806360dfd2b21461078d57600080fd5b806343012ec21461060c578063447988111461062c578063457eff561461064c5780634f6ccce71461067c57600080fd5b80631744cce81161036557806323b872dd1161033457806323b872dd1461058c5780632890e0d7146105ac5780632f745c59146105cc57806342842e0e146105ec57600080fd5b80631744cce81461052f57806318160ddd1461054f5780631c7e9ed0146105645780631e33195a1461056c57600080fd5b80630aea2394116103a15780630aea239414610484578063110bcd45146104c1578063141a468c146104ef57806314364f1d1461051c57600080fd5b806301ffc9a7146103d357806306fdde0314610408578063081812fc1461042a578063095ea7b314610462575b600080fd5b3480156103df57600080fd5b506103f36103ee36600461421f565b610d8e565b60405190151581526020015b60405180910390f35b34801561041457600080fd5b5061041d610d9f565b6040516103ff919061428c565b34801561043657600080fd5b5061044a61044536600461429f565b610e31565b6040516001600160a01b0390911681526020016103ff565b34801561046e57600080fd5b5061048261047d3660046142d4565b610e58565b005b34801561049057600080fd5b506104b461049f36600461429f565b601a6020526000908152604090205460ff1681565b6040516103ff9190614314565b3480156104cd57600080fd5b506104e16104dc3660046143f1565b610f72565b6040519081526020016103ff565b3480156104fb57600080fd5b506104e161050a36600461429f565b600f6020526000908152604090205481565b61048261052a36600461429f565b610faa565b34801561053b57600080fd5b5061048261054a36600461443e565b6110be565b34801561055b57600080fd5b506008546104e1565b6104e16111f7565b34801561057857600080fd5b5061048261058736600461429f565b611380565b34801561059857600080fd5b506104826105a736600461446a565b6113bd565b3480156105b857600080fd5b506104826105c736600461429f565b6113ee565b3480156105d857600080fd5b506104e16105e73660046142d4565b61145a565b3480156105f857600080fd5b5061048261060736600461446a565b6114f0565b34801561061857600080fd5b5061048261062736600461453b565b61150b565b34801561063857600080fd5b506104e161064736600461429f565b611555565b34801561065857600080fd5b506103f361066736600461429f565b60166020526000908152604090205460ff1681565b34801561068857600080fd5b506104e161069736600461429f565b611576565b6104826106aa36600461429f565b611609565b3480156106bb57600080fd5b506104b46106ca36600461429f565b6000908152601a602052604090205460ff1690565b3480156106eb57600080fd5b506107466106fa36600461429f565b601b6020526000908152604090208054600182015460028301546003840154600485015460058601546006909601546001600160a01b0395861696949593949293909116919060ff1687565b604080516001600160a01b03988916815260208101979097528601949094526060850192909252909316608083015260a082019290925290151560c082015260e0016103ff565b34801561079957600080fd5b506104826107a836600461429f565b61186f565b3480156107b957600080fd5b506104826107c836600461429f565b6119d0565b3480156107d957600080fd5b506104e160135481565b3480156107ef57600080fd5b5061044a6107fe36600461429f565b6119dd565b610482610811366004614594565b611a3d565b34801561082257600080fd5b506104e161083136600461429f565b601d6020526000908152604090205481565b34801561084f57600080fd5b506104e161085e3660046145b9565b611b84565b34801561086f57600080fd5b50610482611c0a565b34801561088457600080fd5b506104e16108933660046145d4565b6000828152601d602090815260408083206001600160a01b038516845260010190915290205492915050565b3480156108cb57600080fd5b506104826108da366004614600565b611c1e565b3480156108eb57600080fd5b506104826108fa36600461429f565b611cfa565b34801561090b57600080fd5b5061048261091a366004614622565b611d07565b61048261092d36600461429f565b611d43565b34801561093e57600080fd5b5061048261094d366004614594565b611ea3565b34801561095e57600080fd5b506104e161096d36600461429f565b6000908152601d602052604090205490565b34801561098b57600080fd5b506104e160115481565b3480156109a157600080fd5b50600b546001600160a01b031661044a565b3480156109bf57600080fd5b506104e16109ce36600461429f565b60156020526000908152604090205481565b3480156109ec57600080fd5b506104826109fb36600461443e565b611f74565b348015610a0c57600080fd5b5061041d612109565b348015610a2157600080fd5b50610482610a3036600461429f565b612118565b348015610a4157600080fd5b50600c546104e19081565b348015610a5857600080fd5b50610482610a67366004614656565b612262565b348015610a7857600080fd5b506104e1610a8736600461429f565b612271565b348015610a9857600080fd5b50610ae3610aa736600461429f565b601c60205260009081526040902080546001820154600283015460038401546004909401546001600160a01b0390931693919290919060ff1685565b604080516001600160a01b03909616865260208601949094529284019190915260608301521515608082015260a0016103ff565b348015610b2357600080fd5b50610482610b32366004614687565b612281565b348015610b4357600080fd5b50610482610b5236600461429f565b6122b9565b348015610b6357600080fd5b5061044a610b7236600461429f565b6123da565b348015610b8357600080fd5b5061041d610b9236600461429f565b612404565b348015610ba357600080fd5b50610482610bb23660046146ee565b61240f565b348015610bc357600080fd5b50610bd7610bd236600461429f565b612532565b6040516103ff91906147a8565b348015610bf057600080fd5b50610482610bff36600461443e565b6125d4565b610482610c12366004614818565b6126a0565b348015610c2357600080fd5b506104e1610c3236600461429f565b600d6020526000908152604090205481565b348015610c5057600080fd5b50610482610c5f36600461429f565b612930565b348015610c7057600080fd5b506103f3610c7f366004614859565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b610482610cbb366004614883565b61293d565b348015610ccc57600080fd5b50610ce0610cdb3660046148e6565b612c48565b6040516103ff91906149a9565b348015610cf957600080fd5b50610d0d610d08366004614600565b612cf7565b604080516001600160a01b0395861681529490931660208501529183015260608201526080016103ff565b348015610d4457600080fd5b50610482610d533660046145b9565b612d49565b348015610d6457600080fd5b506104e160175481565b348015610d7a57600080fd5b50610482610d893660046142d4565b612dbf565b6000610d9982612e34565b92915050565b606060008054610dae906149ed565b80601f0160208091040260200160405190810160405280929190818152602001828054610dda906149ed565b8015610e275780601f10610dfc57610100808354040283529160200191610e27565b820191906000526020600020905b815481529060010190602001808311610e0a57829003601f168201915b5050505050905090565b6000610e3c82612e59565b506000908152600460205260409020546001600160a01b031690565b6000610e63826119dd565b9050806001600160a01b0316836001600160a01b031603610ed55760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b0382161480610ef15750610ef18133610c7f565b610f635760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610ecc565b610f6d8383612eb8565b505050565b6000610f82600c80546001019055565b6000610f8d600c5490565b9050610f998482612f26565b610fa38184612f40565b9392505050565b6000818152601c60205260409020600481015460ff166110015760405162461bcd60e51b8152602060048201526012602482015271e8afa54e4654e4b88de58fafe587bae7a79f60701b6044820152606401610ecc565b806001015434146110545760405162461bcd60e51b815260206004820152601860248201527fe694afe4bb98e79a84e7a79fe98791e4b88de6ada3e7a1ae00000000000000006044820152606401610ecc565b80546001600160a01b0319163317815542600282015561107d611076836119dd565b338461300b565b611086826119dd565b6001600160a01b03166108fc349081150290604051600060405180830381858888f19350505050158015610f6d573d6000803e3d6000fd5b336110c8846119dd565b6001600160a01b03161461111e5760405162461bcd60e51b815260206004820152601e60248201527fe58faae69c894e4654e68ba5e69c89e88085e58fafe4bba5e587bae7a79f00006044820152606401610ecc565b6000838152601c602052604090206004015460ff16156111755760405162461bcd60e51b8152602060048201526012602482015271e8afa54e4654e5b7b2e7bb8fe587bae7a79f60701b6044820152606401610ecc565b6040805160a0810182526000808252602080830195865282840182815260608401958652600160808501818152988452601c90925293909120915182546001600160a01b0319166001600160a01b0390911617825593519381019390935551600283015551600382015590516004909101805460ff1916911515919091179055565b6000601354341461124a5760405162461bcd60e51b815260206004820152601860248201527fe694afe4bb98e79a84e4bbb7e6a0bce4b88de6ada3e7a1ae00000000000000006044820152606401610ecc565b60145461128e5760405162461bcd60e51b815260206004820152601260248201527139aca879a7227963ebf9e52a39e6a113919560721b6044820152606401610ecc565b60145460408051426020808301919091523360601b6001600160601b0319168284015282516034818403018152605490920190925280519101206000916112d491614a3d565b90506000601482815481106112eb576112eb614a51565b906000526020600020015490506014600160148054905061130c9190614a7d565b8154811061131c5761131c614a51565b90600052602060002001546014838154811061133a5761133a614a51565b600091825260209091200155601480548061135757611357614a90565b60019003818190600052602060002001600090559055610d99611379826119dd565b338361300b565b61138861303d565b601480546001810182556000919091527fce6d7b5282bd9a3661ae061feed1dbda4e52ab073b1f9285be6e155d9c38d4ec0155565b6113c73382613097565b6113e35760405162461bcd60e51b8152600401610ecc90614aa6565b610f6d83838361300b565b336113f8826119dd565b6001600160a01b03161461144e5760405162461bcd60e51b815260206004820152601e60248201527f4f6e6c79204e465420686f6c646572732063616e206275726e204e46547300006044820152606401610ecc565b61145781613116565b50565b600061146583611b84565b82106114c75760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610ecc565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b610f6d83838360405180602001604052806000815250612281565b61151361303d565b60005b8251811015610f6d5761154283828151811061153457611534614a51565b602002602001015183610f72565b508061154d81614af3565b915050611516565b6019818154811061156557600080fd5b600091825260209091200154905081565b600061158160085490565b82106115e45760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610ecc565b600882815481106115f7576115f7614a51565b90600052602060002001549050919050565b6000818152600d6020526040902054806116655760405162461bcd60e51b815260206004820152601b60248201527fe8afa5e78988e69d83e688964e4654e8bf98e69caae587bae594ae00000000006044820152606401610ecc565b8034146116cd5760405162461bcd60e51b815260206004820152603060248201527fe58f91e98081e4ba86e99499e8afafe79a84e4bbb7e6a0bce68896e694afe4bb60448201526f4c74c3c8f4d14ef25c46f356d1f3d0d760811b6064820152608401610ecc565b60006116d8836119dd565b6000848152601060205260408120546011549293506001600160a01b0316916064906117049034614b0c565b61170e9190614b23565b9050600061171c8234614a7d565b905061172984338861300b565b6040516001600160a01b0384169083156108fc029084906000818181858888f1935050505015801561175f573d6000803e3d6000fd5b506040516001600160a01b0385169082156108fc029083906000818181858888f19350505050158015611796573d6000803e3d6000fd5b506117a03461311f565b600086815260126020908152604080832081516080810183526001600160a01b03808a1680835233838701908152348487018181524260608701908152875460018181018a55988c52998b2096516004909a0290960180549986166001600160a01b03199a8b16178155925196830180549790951696909816959095179092559451600282015590516003909101559051919281156108fc029290818181858888f19350505050158015611858573d6000803e3d6000fd5b50505060009384525050600d602052506040812055565b33611879826119dd565b6001600160a01b0316146118db5760405162461bcd60e51b8152602060048201526024808201527fe58faae69c894e4654e68980e69c89e88085e58fafe4bba5e9a286e58f96e5a560448201526396e58ab160e01b6064820152608401610ecc565b60008181526016602052604090205460ff161561193a5760405162461bcd60e51b815260206004820152601b60248201527fe5bfa0e8af9ae5baa6e5a596e58ab1e5b7b2e7bb8fe9a286e58f9600000000006044820152606401610ecc565b6017546000828152601560205260409020546119569190614b37565b4210156119b55760405162461bcd60e51b815260206004820152602760248201527fe68c81e69c89e697b6e997b4e4b88de8b6b3efbc8ce4b88de883bde9a286e58f60448201526696e5a596e58ab160c81b6064820152608401610ecc565b6000908152601660205260409020805460ff19166001179055565b6119d861303d565b601155565b6000818152600260205260408120546001600160a01b031680610d995760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610ecc565b6000838152600260205260409020546001600160a01b0316611a985760405162461bcd60e51b8152602060048201526014602482015273151bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610ecc565b611aa1836119dd565b6001600160a01b0316826001600160a01b031614611b015760405162461bcd60e51b815260206004820152601d60248201527f46726f6d2061646472657373206973206e6f7420746865206f776e65720000006044820152606401610ecc565b803414611b425760405162461bcd60e51b815260206004820152600f60248201526e496e636f727265637420707269636560881b6044820152606401610ecc565b6040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015611b78573d6000803e3d6000fd5b50610f6d82338561300b565b60006001600160a01b038216611bee5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610ecc565b506001600160a01b031660009081526003602052604090205490565b611c1261303d565b611c1c60006131cd565b565b33611c28836119dd565b6001600160a01b031614611c8e5760405162461bcd60e51b815260206004820152602760248201527fe58faae69c894e4654e68ba5e69c89e88085e58fafe4bba5e8bf9be8a18ce7a26044820152664773c4c3f2c64b60c91b6064820152608401610ecc565b60008111611cd75760405162461bcd60e51b81526020600482015260166024820152750e4bbbde9a29de695b0e5bf85e9a1bbe5a4a7e4ba8e360541b6044820152606401610ecc565b6000918252601d6020908152604080842083815533855260010190915290912055565b611d0261303d565b601355565b611d0f61303d565b6000828152601a60205260409020805482919060ff19166001836003811115611d3a57611d3a6142fe565b02179055505050565b6000818152601b60205260409020600681015460ff16611d9a5760405162461bcd60e51b8152602060048201526012602482015271e8afa5e68b8de58d96e4b88de6b4bbe8b78360701b6044820152606401610ecc565b80600501544210611ddf5760405162461bcd60e51b815260206004820152600f60248201526ee68b8de58d96e5b7b2e7bb93e69d9f60881b6044820152606401610ecc565b80600301543411611e325760405162461bcd60e51b815260206004820152601e60248201527fe587bae4bbb7e4bd8ee4ba8ee5bd93e5898de69c80e9ab98e587bae4bbb700006044820152606401610ecc565b60048101546001600160a01b031615611e8757600481015460038201546040516001600160a01b039092169181156108fc0291906000818181858888f19350505050158015611e85573d6000803e3d6000fd5b505b34600382015560040180546001600160a01b0319163317905550565b6000838152601d60209081526040808320338452600101909152902054811115611f045760405162461bcd60e51b8152602060048201526012602482015271e68c81e69c89e4bbbde9a29de4b88de8b6b360701b6044820152606401610ecc565b6000838152601d6020908152604080832033845260010190915281208054839290611f30908490614a7d565b90915550506000838152601d602090815260408083206001600160a01b038616845260010190915281208054839290611f6a908490614b37565b9091555050505050565b33611f7e846119dd565b6001600160a01b031614611fe05760405162461bcd60e51b8152602060048201526024808201527fe58faae69c894e4654e68ba5e69c89e88085e58fafe4bba5e58f91e8b5b7e68b60448201526346f2c6cb60e11b6064820152608401610ecc565b6000838152601b602052604090206006015460ff16156120425760405162461bcd60e51b815260206004820152601b60248201527fe8bf99e59cba4e4654e68b8de58d96e5b7b2e8a2abe6bf80e6b4bb00000000006044820152606401610ecc565b6040805160e08101825233815260208101859052908101839052600060608201819052608082015260a081016120788342614b37565b8152600160209182018190526000958652601b8252604095869020835181546001600160a01b03199081166001600160a01b039283161783559385015192820192909255958301516002870155606083015160038701556080830151600487018054909316911617905560a0810151600585015560c001516006909301805460ff1916931515939093179092555050565b606060018054610dae906149ed565b6000818152601c60205260409020600481015460ff1661217a5760405162461bcd60e51b815260206004820152601b60248201527fe8afa54e4654e69caae5a484e4ba8ee587bae7a79fe78ab6e6808100000000006044820152606401610ecc565b8060030154816002015461218e9190614b37565b4210156121d55760405162461bcd60e51b8152602060048201526015602482015274e7a79fe8b581e69c9fe5b09ae69caae7bb93e69d9f60581b6044820152606401610ecc565b80546001600160a01b03166122215760405162461bcd60e51b8152602060048201526012602482015271e8afa54e4654e69caae8a2abe7a79fe8b58160701b6044820152606401610ecc565b805461223f906001600160a01b0316612239846119dd565b8461300b565b80546001600160a01b031916815560006002820155600401805460ff1916905550565b61226d33838361321f565b5050565b6014818154811061156557600080fd5b61228b3383613097565b6122a75760405162461bcd60e51b8152600401610ecc90614aa6565b6122b3848484846132ed565b50505050565b6000818152601b60205260409020600681015460ff1661230d5760405162461bcd60e51b815260206004820152600f60248201526ee68b8de58d96e5b7b2e7bb93e69d9f60881b6044820152606401610ecc565b80600501544210156123565760405162461bcd60e51b8152602060048201526012602482015271e68b8de58d96e5b09ae69caae7bb93e69d9f60701b6044820152606401610ecc565b60068101805460ff1916905560048101546001600160a01b03161561226d57612395612381836119dd565b60048301546001600160a01b03168461300b565b61239e826119dd565b6001600160a01b03166108fc82600301549081150290604051600060405180830381858888f19350505050158015610f6d573d6000803e3d6000fd5b601881815481106123ea57600080fd5b6000918252602090912001546001600160a01b0316905081565b6060610d9982613320565b61241761303d565b80518251146124685760405162461bcd60e51b815260206004820152601e60248201527fe59cb0e59d80e5928ce6af94e4be8be995bfe5baa6e4b88de58cb9e9858d00006044820152606401610ecc565b6000805b82518110156124ae5782818151811061248757612487614a51565b60200260200101518261249a9190614b37565b9150806124a681614af3565b91505061246c565b50606481111561250b5760405162461bcd60e51b815260206004820152602260248201527fe58886e7baa2e6af94e4be8be680bbe5928ce4b88de883bde8b685e8bf873130604482015261302560f01b6064820152608401610ecc565b825161251e90601890602086019061411e565b5081516122b3906019906020850190614183565b606060126000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156125c9576000848152602090819020604080516080810182526004860290920180546001600160a01b039081168452600180830154909116848601526002820154928401929092526003015460608301529083529092019101612567565b505050509050919050565b336125de846119dd565b6001600160a01b03161461263e5760405162461bcd60e51b815260206004820152602160248201527fe58faae69c89e68ba5e69c89e88085e6898de883bde58f91e8b5b7e68b8de58d6044820152604b60f91b6064820152608401610ecc565b6000838152601b602052604090206006015460ff16156120425760405162461bcd60e51b815260206004820152601b60248201527fe8afa5e78988e69d83e5b7b2e7bb8fe59ca8e68b8de58d96e4b8ad00000000006044820152606401610ecc565b6000848152600d602052604090205483146126cd5760405162461bcd60e51b8152600401610ecc90614b4a565b6126d982610258614b37565b4211156127225760405162461bcd60e51b8152602060048201526017602482015276151c985b9cd858dd1a5bdb881a185cc8195e1c1a5c9959604a1b6044820152606401610ecc565b600061272d856119dd565b60408051602081018890529081018690526001600160601b031933606090811b82168184015283901b1660748201526088810185905290915060009060a80160408051601f1981840301815291815281516020928301206000818152600e90935291205490915060ff16156127e45760405162461bcd60e51b815260206004820152601d60248201527f5472616e73616374696f6e20616c72656164792070726f6365737365640000006044820152606401610ecc565b6127ef818484613428565b6128365760405162461bcd60e51b8152602060048201526018602482015277496e76616c69642073656c6c6572207369676e617475726560401b6044820152606401610ecc565b84341461287c5760405162461bcd60e51b8152602060048201526014602482015273125b98dbdc9c9958dd081c1c9a58d9481cd95b9d60621b6044820152606401610ecc565b61288782338861300b565b6040516001600160a01b038316903480156108fc02916000818181858888f193505050501580156128bc573d6000803e3d6000fd5b506000818152600e602052604090819020805460ff19166001179055516001600160a01b03831690339088907fcc67c9df55afb3e8007bb6ac2d0263fcb716278a856040d1c94fe7fba4bac7ee90612920908a904290918252602082015260400190565b60405180910390a4505050505050565b61293861303d565b601755565b6000858152600d6020526040902054841461296a5760405162461bcd60e51b8152600401610ecc90614b4a565b61297683610258614b37565b4211156129bf5760405162461bcd60e51b8152602060048201526017602482015276151c985b9cd858dd1a5bdb881a185cc8195e1c1a5c9959604a1b6044820152606401610ecc565b60006129ca866119dd565b60408051602081018990529081018790526001600160601b031933606090811b82168184015283901b1660748201526088810186905260a8810185905290915060009060c80160408051601f1981840301815291815281516020928301206000818152600e90935291205490915060ff1615612a885760405162461bcd60e51b815260206004820152601d60248201527f5472616e73616374696f6e20616c72656164792070726f6365737365640000006044820152606401610ecc565b6000878152600f60205260409020548414612adc5760405162461bcd60e51b815260206004820152601460248201527309cdedcc6ca40c8decae640dcdee840dac2e8c6d60631b6044820152606401610ecc565b612ae7818484613428565b612b2e5760405162461bcd60e51b8152602060048201526018602482015277496e76616c69642073656c6c6572207369676e617475726560401b6044820152606401610ecc565b853414612b745760405162461bcd60e51b8152602060048201526014602482015273125b98dbdc9c9958dd081c1c9a58d9481cd95b9d60621b6044820152606401610ecc565b612b7f82338961300b565b6040516001600160a01b038316903480156108fc02916000818181858888f19350505050158015612bb4573d6000803e3d6000fd5b506000878152600f60205260408120805491612bcf83614af3565b90915550506000818152600e602052604090819020805460ff19166001179055516001600160a01b03831690339089907fcc67c9df55afb3e8007bb6ac2d0263fcb716278a856040d1c94fe7fba4bac7ee90612c37908b904290918252602082015260400190565b60405180910390a450505050505050565b6060600082516001600160401b03811115612c6557612c6561433c565b604051908082528060200260200182016040528015612c8e578160200160208202803683370190505b50905060005b8351811015612cef57612cc085858381518110612cb357612cb3614a51565b6020026020010151610f72565b828281518110612cd257612cd2614a51565b602090810291909101015280612ce781614af3565b915050612c94565b509392505050565b60126020528160005260406000208181548110612d1357600080fd5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b0392831695509116925084565b612d5161303d565b6001600160a01b038116612db65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610ecc565b611457816131cd565b33612dc9826119dd565b6001600160a01b031614612e295760405162461bcd60e51b815260206004820152602160248201527fe58faae69c894e4654e68c81e69c89e88085e58fafe4bba5e8bdace5a29e4e466044820152601560fa1b6064820152608401610ecc565b61226d33838361300b565b60006001600160e01b03198216632483248360e11b1480610d995750610d998261346c565b6000818152600260205260409020546001600160a01b03166114575760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610ecc565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612eed826119dd565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b61226d828260405180602001604052806000815250613491565b6000828152600260205260409020546001600160a01b0316612fbb5760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b6064820152608401610ecc565b6000828152600a60205260409020612fd38282614bdd565b506040518281527ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce79060200160405180910390a15050565b6130168383836134c4565b600090815260156020908152604080832042905560169091529020805460ff191690555050565b600b546001600160a01b03163314611c1c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610ecc565b6000806130a3836119dd565b9050806001600160a01b0316846001600160a01b031614806130ea57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b8061310e5750836001600160a01b031661310384610e31565b6001600160a01b0316145b949350505050565b61145781613635565b60005b60185481101561226d57600060646019838154811061314357613143614a51565b9060005260206000200154846131599190614b0c565b6131639190614b23565b90506018828154811061317857613178614a51565b60009182526020822001546040516001600160a01b039091169183156108fc02918491818181858888f193505050501580156131b8573d6000803e3d6000fd5b505080806131c590614af3565b915050613122565b600b80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316036132805760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610ecc565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6132f884848461300b565b61330484848484613675565b6122b35760405162461bcd60e51b8152600401610ecc90614c9c565b606061332b82612e59565b6000828152600a602052604081208054613344906149ed565b80601f0160208091040260200160405190810160405280929190818152602001828054613370906149ed565b80156133bd5780601f10613392576101008083540402835291602001916133bd565b820191906000526020600020905b8154815290600101906020018083116133a057829003601f168201915b5050505050905060006133db60408051602081019091526000815290565b905080516000036133ed575092915050565b81511561341f578082604051602001613407929190614cee565b60405160208183030381529060405292505050919050565b61310e84613776565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c849052603c81206001600160a01b0383169061310390856137e9565b60006001600160e01b0319821663780e9d6360e01b1480610d995750610d9982613805565b61349b8383613855565b6134a86000848484613675565b610f6d5760405162461bcd60e51b8152600401610ecc90614c9c565b826001600160a01b03166134d7826119dd565b6001600160a01b0316146134fd5760405162461bcd60e51b8152600401610ecc90614d1d565b6001600160a01b03821661355f5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610ecc565b61356c83838360016139ee565b826001600160a01b031661357f826119dd565b6001600160a01b0316146135a55760405162461bcd60e51b8152600401610ecc90614d1d565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b61363e816139fa565b6000818152600a602052604090208054613657906149ed565b159050611457576000818152600a60205260408120611457916141be565b60006001600160a01b0384163b1561376b57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906136b9903390899088908890600401614d62565b6020604051808303816000875af19250505080156136f4575060408051601f3d908101601f191682019092526136f191810190614d9f565b60015b613751573d808015613722576040519150601f19603f3d011682016040523d82523d6000602084013e613727565b606091505b5080516000036137495760405162461bcd60e51b8152600401610ecc90614c9c565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061310e565b506001949350505050565b606061378182612e59565b600061379860408051602081019091526000815290565b905060008151116137b85760405180602001604052806000815250610fa3565b806137c284613a9d565b6040516020016137d3929190614cee565b6040516020818303038152906040529392505050565b60008060006137f88585613b2f565b91509150612cef81613b74565b60006001600160e01b031982166380ac58cd60e01b148061383657506001600160e01b03198216635b5e139f60e01b145b80610d9957506301ffc9a760e01b6001600160e01b0319831614610d99565b6001600160a01b0382166138ab5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610ecc565b6000818152600260205260409020546001600160a01b0316156139105760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610ecc565b61391e6000838360016139ee565b6000818152600260205260409020546001600160a01b0316156139835760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610ecc565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6122b384848484613cbe565b6000613a05826119dd565b9050613a158160008460016139ee565b613a1e826119dd565b600083815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0385168085526003845282852080546000190190558785526002909352818420805490911690555192935084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60606000613aaa83613df2565b60010190506000816001600160401b03811115613ac957613ac961433c565b6040519080825280601f01601f191660200182016040528015613af3576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084613afd57509392505050565b6000808251604103613b655760208301516040840151606085015160001a613b5987828585613eca565b94509450505050613b6d565b506000905060025b9250929050565b6000816004811115613b8857613b886142fe565b03613b905750565b6001816004811115613ba457613ba46142fe565b03613bf15760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610ecc565b6002816004811115613c0557613c056142fe565b03613c525760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610ecc565b6003816004811115613c6657613c666142fe565b036114575760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610ecc565b6001811115613d2d5760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e7365637574697665207472604482015274185b9cd9995c9cc81b9bdd081cdd5c1c1bdc9d1959605a1b6064820152608401610ecc565b816001600160a01b038516613d8957613d8481600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b613dac565b836001600160a01b0316856001600160a01b031614613dac57613dac8582613f8e565b6001600160a01b038416613dc857613dc38161402b565b613deb565b846001600160a01b0316846001600160a01b031614613deb57613deb84826140da565b5050505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310613e315772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310613e5d576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310613e7b57662386f26fc10000830492506010015b6305f5e1008310613e93576305f5e100830492506008015b6127108310613ea757612710830492506004015b60648310613eb9576064830492506002015b600a8310610d995760010192915050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115613f015750600090506003613f85565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015613f55573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116613f7e57600060019250925050613f85565b9150600090505b94509492505050565b60006001613f9b84611b84565b613fa59190614a7d565b600083815260076020526040902054909150808214613ff8576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061403d90600190614a7d565b6000838152600960205260408120546008805493945090928490811061406557614065614a51565b90600052602060002001549050806008838154811061408657614086614a51565b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806140be576140be614a90565b6001900381819060005260206000200160009055905550505050565b60006140e583611b84565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b828054828255906000526020600020908101928215614173579160200282015b8281111561417357825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061413e565b5061417f9291506141f4565b5090565b828054828255906000526020600020908101928215614173579160200282015b828111156141735782518255916020019190600101906141a3565b5080546141ca906149ed565b6000825580601f106141da575050565b601f01602090049060005260206000209081019061145791905b5b8082111561417f57600081556001016141f5565b6001600160e01b03198116811461145757600080fd5b60006020828403121561423157600080fd5b8135610fa381614209565b60005b8381101561425757818101518382015260200161423f565b50506000910152565b6000815180845261427881602086016020860161423c565b601f01601f19169290920160200192915050565b602081526000610fa36020830184614260565b6000602082840312156142b157600080fd5b5035919050565b80356001600160a01b03811681146142cf57600080fd5b919050565b600080604083850312156142e757600080fd5b6142f0836142b8565b946020939093013593505050565b634e487b7160e01b600052602160045260246000fd5b602081016004831061433657634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561437a5761437a61433c565b604052919050565b600082601f83011261439357600080fd5b81356001600160401b038111156143ac576143ac61433c565b6143bf601f8201601f1916602001614352565b8181528460208386010111156143d457600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121561440457600080fd5b61440d836142b8565b915060208301356001600160401b0381111561442857600080fd5b61443485828601614382565b9150509250929050565b60008060006060848603121561445357600080fd5b505081359360208301359350604090920135919050565b60008060006060848603121561447f57600080fd5b614488846142b8565b9250614496602085016142b8565b9150604084013590509250925092565b60006001600160401b038211156144bf576144bf61433c565b5060051b60200190565b600082601f8301126144da57600080fd5b813560206144ef6144ea836144a6565b614352565b82815260059290921b8401810191818101908684111561450e57600080fd5b8286015b8481101561453057614523816142b8565b8352918301918301614512565b509695505050505050565b6000806040838503121561454e57600080fd5b82356001600160401b038082111561456557600080fd5b614571868387016144c9565b9350602085013591508082111561458757600080fd5b5061443485828601614382565b6000806000606084860312156145a957600080fd5b83359250614496602085016142b8565b6000602082840312156145cb57600080fd5b610fa3826142b8565b600080604083850312156145e757600080fd5b823591506145f7602084016142b8565b90509250929050565b6000806040838503121561461357600080fd5b50508035926020909101359150565b6000806040838503121561463557600080fd5b8235915060208301356004811061464b57600080fd5b809150509250929050565b6000806040838503121561466957600080fd5b614672836142b8565b91506020830135801515811461464b57600080fd5b6000806000806080858703121561469d57600080fd5b6146a6856142b8565b93506146b4602086016142b8565b92506040850135915060608501356001600160401b038111156146d657600080fd5b6146e287828801614382565b91505092959194509250565b6000806040838503121561470157600080fd5b82356001600160401b038082111561471857600080fd5b614724868387016144c9565b935060209150818501358181111561473b57600080fd5b85019050601f8101861361474e57600080fd5b803561475c6144ea826144a6565b81815260059190911b8201830190838101908883111561477b57600080fd5b928401925b8284101561479957833582529284019290840190614780565b80955050505050509250929050565b602080825282518282018190526000919060409081850190868401855b8281101561480b57815180516001600160a01b039081168652878201511687860152858101518686015260609081015190850152608090930192908501906001016147c5565b5091979650505050505050565b6000806000806080858703121561482e57600080fd5b84359350602085013592506040850135915060608501356001600160401b038111156146d657600080fd5b6000806040838503121561486c57600080fd5b614875836142b8565b91506145f7602084016142b8565b600080600080600060a0868803121561489b57600080fd5b8535945060208601359350604086013592506060860135915060808601356001600160401b038111156148cd57600080fd5b6148d988828901614382565b9150509295509295909350565b600080604083850312156148f957600080fd5b614902836142b8565b91506020808401356001600160401b038082111561491f57600080fd5b818601915086601f83011261493357600080fd5b81356149416144ea826144a6565b81815260059190911b8301840190848101908983111561496057600080fd5b8585015b838110156149985780358581111561497c5760008081fd5b61498a8c89838a0101614382565b845250918601918601614964565b508096505050505050509250929050565b6020808252825182820181905260009190848201906040850190845b818110156149e1578351835292840192918401916001016149c5565b50909695505050505050565b600181811c90821680614a0157607f821691505b602082108103614a2157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601260045260246000fd5b600082614a4c57614a4c614a27565b500690565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b81810381811115610d9957610d99614a67565b634e487b7160e01b600052603160045260246000fd5b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b600060018201614b0557614b05614a67565b5060010190565b8082028115828204841417610d9957610d99614a67565b600082614b3257614b32614a27565b500490565b80820180821115610d9957610d99614a67565b60208082526025908201527f507269636520646f6573206e6f74206d6174636820746865206c697374656420604082015264707269636560d81b606082015260800190565b601f821115610f6d57600081815260208120601f850160051c81016020861015614bb65750805b601f850160051c820191505b81811015614bd557828155600101614bc2565b505050505050565b81516001600160401b03811115614bf657614bf661433c565b614c0a81614c0484546149ed565b84614b8f565b602080601f831160018114614c3f5760008415614c275750858301515b600019600386901b1c1916600185901b178555614bd5565b600085815260208120601f198616915b82811015614c6e57888601518255948401946001909101908401614c4f565b5085821015614c8c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60008351614d0081846020880161423c565b835190830190614d1481836020880161423c565b01949350505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090614d9590830184614260565b9695505050505050565b600060208284031215614db157600080fd5b8151610fa38161420956fea264697066735822122064f4e010c6a3ea66c62914075dbfe6445ce5c07c4260b32dc78ab4879a2262dd64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106103ce5760003560e01c806377ef8d7f116101fd578063b88d4fde11610118578063e5afe3e6116100ab578063ed0e31de1161007a578063ed0e31de14610cc0578063f20370c114610ced578063f2fde38b14610d38578063f45263dd14610d58578063f746a5ea14610d6e57600080fd5b8063e5afe3e614610c17578063e8e9cd5b14610c44578063e985e9c514610c64578063ec11baac14610cad57600080fd5b8063cabecf8c116100e7578063cabecf8c14610b97578063cc55ae6914610bb7578063cda4beef14610be4578063d91483f114610c0457600080fd5b8063b88d4fde14610b17578063b9a2de3a14610b37578063bcd7746114610b57578063c87b56dd14610b7757600080fd5b80638f4b7c3e1161019057806398bdf6f51161015f57806398bdf6f514610a35578063a22cb46514610a4c578063ad64d06814610a6c578063af94a1d114610a8c57600080fd5b80638f4b7c3e146109b357806391e078bb146109e057806395d89b4114610a0057806397491d6f14610a1557600080fd5b806384b9a6e6116101cc57806384b9a6e61461093257806385fff858146109525780638a71bb2d1461097f5780638da5cb5b1461099557600080fd5b806377ef8d7f146108bf57806378084c9d146108df5780637894505e146108ff5780637a183e841461091f57600080fd5b806343012ec2116102ed57806361ba27da116102805780636e8400501161024f5780636e8400501461081657806370a0823114610843578063715018a61461086357806375c0b9fe1461087857600080fd5b806361ba27da146107ad57806361cefff4146107cd5780636352211e146107e3578063650e5d6d1461080357600080fd5b806351ed8288116102bc57806351ed82881461069c578063555ec78b146106af578063571a26a0146106df57806360dfd2b21461078d57600080fd5b806343012ec21461060c578063447988111461062c578063457eff561461064c5780634f6ccce71461067c57600080fd5b80631744cce81161036557806323b872dd1161033457806323b872dd1461058c5780632890e0d7146105ac5780632f745c59146105cc57806342842e0e146105ec57600080fd5b80631744cce81461052f57806318160ddd1461054f5780631c7e9ed0146105645780631e33195a1461056c57600080fd5b80630aea2394116103a15780630aea239414610484578063110bcd45146104c1578063141a468c146104ef57806314364f1d1461051c57600080fd5b806301ffc9a7146103d357806306fdde0314610408578063081812fc1461042a578063095ea7b314610462575b600080fd5b3480156103df57600080fd5b506103f36103ee36600461421f565b610d8e565b60405190151581526020015b60405180910390f35b34801561041457600080fd5b5061041d610d9f565b6040516103ff919061428c565b34801561043657600080fd5b5061044a61044536600461429f565b610e31565b6040516001600160a01b0390911681526020016103ff565b34801561046e57600080fd5b5061048261047d3660046142d4565b610e58565b005b34801561049057600080fd5b506104b461049f36600461429f565b601a6020526000908152604090205460ff1681565b6040516103ff9190614314565b3480156104cd57600080fd5b506104e16104dc3660046143f1565b610f72565b6040519081526020016103ff565b3480156104fb57600080fd5b506104e161050a36600461429f565b600f6020526000908152604090205481565b61048261052a36600461429f565b610faa565b34801561053b57600080fd5b5061048261054a36600461443e565b6110be565b34801561055b57600080fd5b506008546104e1565b6104e16111f7565b34801561057857600080fd5b5061048261058736600461429f565b611380565b34801561059857600080fd5b506104826105a736600461446a565b6113bd565b3480156105b857600080fd5b506104826105c736600461429f565b6113ee565b3480156105d857600080fd5b506104e16105e73660046142d4565b61145a565b3480156105f857600080fd5b5061048261060736600461446a565b6114f0565b34801561061857600080fd5b5061048261062736600461453b565b61150b565b34801561063857600080fd5b506104e161064736600461429f565b611555565b34801561065857600080fd5b506103f361066736600461429f565b60166020526000908152604090205460ff1681565b34801561068857600080fd5b506104e161069736600461429f565b611576565b6104826106aa36600461429f565b611609565b3480156106bb57600080fd5b506104b46106ca36600461429f565b6000908152601a602052604090205460ff1690565b3480156106eb57600080fd5b506107466106fa36600461429f565b601b6020526000908152604090208054600182015460028301546003840154600485015460058601546006909601546001600160a01b0395861696949593949293909116919060ff1687565b604080516001600160a01b03988916815260208101979097528601949094526060850192909252909316608083015260a082019290925290151560c082015260e0016103ff565b34801561079957600080fd5b506104826107a836600461429f565b61186f565b3480156107b957600080fd5b506104826107c836600461429f565b6119d0565b3480156107d957600080fd5b506104e160135481565b3480156107ef57600080fd5b5061044a6107fe36600461429f565b6119dd565b610482610811366004614594565b611a3d565b34801561082257600080fd5b506104e161083136600461429f565b601d6020526000908152604090205481565b34801561084f57600080fd5b506104e161085e3660046145b9565b611b84565b34801561086f57600080fd5b50610482611c0a565b34801561088457600080fd5b506104e16108933660046145d4565b6000828152601d602090815260408083206001600160a01b038516845260010190915290205492915050565b3480156108cb57600080fd5b506104826108da366004614600565b611c1e565b3480156108eb57600080fd5b506104826108fa36600461429f565b611cfa565b34801561090b57600080fd5b5061048261091a366004614622565b611d07565b61048261092d36600461429f565b611d43565b34801561093e57600080fd5b5061048261094d366004614594565b611ea3565b34801561095e57600080fd5b506104e161096d36600461429f565b6000908152601d602052604090205490565b34801561098b57600080fd5b506104e160115481565b3480156109a157600080fd5b50600b546001600160a01b031661044a565b3480156109bf57600080fd5b506104e16109ce36600461429f565b60156020526000908152604090205481565b3480156109ec57600080fd5b506104826109fb36600461443e565b611f74565b348015610a0c57600080fd5b5061041d612109565b348015610a2157600080fd5b50610482610a3036600461429f565b612118565b348015610a4157600080fd5b50600c546104e19081565b348015610a5857600080fd5b50610482610a67366004614656565b612262565b348015610a7857600080fd5b506104e1610a8736600461429f565b612271565b348015610a9857600080fd5b50610ae3610aa736600461429f565b601c60205260009081526040902080546001820154600283015460038401546004909401546001600160a01b0390931693919290919060ff1685565b604080516001600160a01b03909616865260208601949094529284019190915260608301521515608082015260a0016103ff565b348015610b2357600080fd5b50610482610b32366004614687565b612281565b348015610b4357600080fd5b50610482610b5236600461429f565b6122b9565b348015610b6357600080fd5b5061044a610b7236600461429f565b6123da565b348015610b8357600080fd5b5061041d610b9236600461429f565b612404565b348015610ba357600080fd5b50610482610bb23660046146ee565b61240f565b348015610bc357600080fd5b50610bd7610bd236600461429f565b612532565b6040516103ff91906147a8565b348015610bf057600080fd5b50610482610bff36600461443e565b6125d4565b610482610c12366004614818565b6126a0565b348015610c2357600080fd5b506104e1610c3236600461429f565b600d6020526000908152604090205481565b348015610c5057600080fd5b50610482610c5f36600461429f565b612930565b348015610c7057600080fd5b506103f3610c7f366004614859565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b610482610cbb366004614883565b61293d565b348015610ccc57600080fd5b50610ce0610cdb3660046148e6565b612c48565b6040516103ff91906149a9565b348015610cf957600080fd5b50610d0d610d08366004614600565b612cf7565b604080516001600160a01b0395861681529490931660208501529183015260608201526080016103ff565b348015610d4457600080fd5b50610482610d533660046145b9565b612d49565b348015610d6457600080fd5b506104e160175481565b348015610d7a57600080fd5b50610482610d893660046142d4565b612dbf565b6000610d9982612e34565b92915050565b606060008054610dae906149ed565b80601f0160208091040260200160405190810160405280929190818152602001828054610dda906149ed565b8015610e275780601f10610dfc57610100808354040283529160200191610e27565b820191906000526020600020905b815481529060010190602001808311610e0a57829003601f168201915b5050505050905090565b6000610e3c82612e59565b506000908152600460205260409020546001600160a01b031690565b6000610e63826119dd565b9050806001600160a01b0316836001600160a01b031603610ed55760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b0382161480610ef15750610ef18133610c7f565b610f635760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610ecc565b610f6d8383612eb8565b505050565b6000610f82600c80546001019055565b6000610f8d600c5490565b9050610f998482612f26565b610fa38184612f40565b9392505050565b6000818152601c60205260409020600481015460ff166110015760405162461bcd60e51b8152602060048201526012602482015271e8afa54e4654e4b88de58fafe587bae7a79f60701b6044820152606401610ecc565b806001015434146110545760405162461bcd60e51b815260206004820152601860248201527fe694afe4bb98e79a84e7a79fe98791e4b88de6ada3e7a1ae00000000000000006044820152606401610ecc565b80546001600160a01b0319163317815542600282015561107d611076836119dd565b338461300b565b611086826119dd565b6001600160a01b03166108fc349081150290604051600060405180830381858888f19350505050158015610f6d573d6000803e3d6000fd5b336110c8846119dd565b6001600160a01b03161461111e5760405162461bcd60e51b815260206004820152601e60248201527fe58faae69c894e4654e68ba5e69c89e88085e58fafe4bba5e587bae7a79f00006044820152606401610ecc565b6000838152601c602052604090206004015460ff16156111755760405162461bcd60e51b8152602060048201526012602482015271e8afa54e4654e5b7b2e7bb8fe587bae7a79f60701b6044820152606401610ecc565b6040805160a0810182526000808252602080830195865282840182815260608401958652600160808501818152988452601c90925293909120915182546001600160a01b0319166001600160a01b0390911617825593519381019390935551600283015551600382015590516004909101805460ff1916911515919091179055565b6000601354341461124a5760405162461bcd60e51b815260206004820152601860248201527fe694afe4bb98e79a84e4bbb7e6a0bce4b88de6ada3e7a1ae00000000000000006044820152606401610ecc565b60145461128e5760405162461bcd60e51b815260206004820152601260248201527139aca879a7227963ebf9e52a39e6a113919560721b6044820152606401610ecc565b60145460408051426020808301919091523360601b6001600160601b0319168284015282516034818403018152605490920190925280519101206000916112d491614a3d565b90506000601482815481106112eb576112eb614a51565b906000526020600020015490506014600160148054905061130c9190614a7d565b8154811061131c5761131c614a51565b90600052602060002001546014838154811061133a5761133a614a51565b600091825260209091200155601480548061135757611357614a90565b60019003818190600052602060002001600090559055610d99611379826119dd565b338361300b565b61138861303d565b601480546001810182556000919091527fce6d7b5282bd9a3661ae061feed1dbda4e52ab073b1f9285be6e155d9c38d4ec0155565b6113c73382613097565b6113e35760405162461bcd60e51b8152600401610ecc90614aa6565b610f6d83838361300b565b336113f8826119dd565b6001600160a01b03161461144e5760405162461bcd60e51b815260206004820152601e60248201527f4f6e6c79204e465420686f6c646572732063616e206275726e204e46547300006044820152606401610ecc565b61145781613116565b50565b600061146583611b84565b82106114c75760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610ecc565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b610f6d83838360405180602001604052806000815250612281565b61151361303d565b60005b8251811015610f6d5761154283828151811061153457611534614a51565b602002602001015183610f72565b508061154d81614af3565b915050611516565b6019818154811061156557600080fd5b600091825260209091200154905081565b600061158160085490565b82106115e45760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610ecc565b600882815481106115f7576115f7614a51565b90600052602060002001549050919050565b6000818152600d6020526040902054806116655760405162461bcd60e51b815260206004820152601b60248201527fe8afa5e78988e69d83e688964e4654e8bf98e69caae587bae594ae00000000006044820152606401610ecc565b8034146116cd5760405162461bcd60e51b815260206004820152603060248201527fe58f91e98081e4ba86e99499e8afafe79a84e4bbb7e6a0bce68896e694afe4bb60448201526f4c74c3c8f4d14ef25c46f356d1f3d0d760811b6064820152608401610ecc565b60006116d8836119dd565b6000848152601060205260408120546011549293506001600160a01b0316916064906117049034614b0c565b61170e9190614b23565b9050600061171c8234614a7d565b905061172984338861300b565b6040516001600160a01b0384169083156108fc029084906000818181858888f1935050505015801561175f573d6000803e3d6000fd5b506040516001600160a01b0385169082156108fc029083906000818181858888f19350505050158015611796573d6000803e3d6000fd5b506117a03461311f565b600086815260126020908152604080832081516080810183526001600160a01b03808a1680835233838701908152348487018181524260608701908152875460018181018a55988c52998b2096516004909a0290960180549986166001600160a01b03199a8b16178155925196830180549790951696909816959095179092559451600282015590516003909101559051919281156108fc029290818181858888f19350505050158015611858573d6000803e3d6000fd5b50505060009384525050600d602052506040812055565b33611879826119dd565b6001600160a01b0316146118db5760405162461bcd60e51b8152602060048201526024808201527fe58faae69c894e4654e68980e69c89e88085e58fafe4bba5e9a286e58f96e5a560448201526396e58ab160e01b6064820152608401610ecc565b60008181526016602052604090205460ff161561193a5760405162461bcd60e51b815260206004820152601b60248201527fe5bfa0e8af9ae5baa6e5a596e58ab1e5b7b2e7bb8fe9a286e58f9600000000006044820152606401610ecc565b6017546000828152601560205260409020546119569190614b37565b4210156119b55760405162461bcd60e51b815260206004820152602760248201527fe68c81e69c89e697b6e997b4e4b88de8b6b3efbc8ce4b88de883bde9a286e58f60448201526696e5a596e58ab160c81b6064820152608401610ecc565b6000908152601660205260409020805460ff19166001179055565b6119d861303d565b601155565b6000818152600260205260408120546001600160a01b031680610d995760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610ecc565b6000838152600260205260409020546001600160a01b0316611a985760405162461bcd60e51b8152602060048201526014602482015273151bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610ecc565b611aa1836119dd565b6001600160a01b0316826001600160a01b031614611b015760405162461bcd60e51b815260206004820152601d60248201527f46726f6d2061646472657373206973206e6f7420746865206f776e65720000006044820152606401610ecc565b803414611b425760405162461bcd60e51b815260206004820152600f60248201526e496e636f727265637420707269636560881b6044820152606401610ecc565b6040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015611b78573d6000803e3d6000fd5b50610f6d82338561300b565b60006001600160a01b038216611bee5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610ecc565b506001600160a01b031660009081526003602052604090205490565b611c1261303d565b611c1c60006131cd565b565b33611c28836119dd565b6001600160a01b031614611c8e5760405162461bcd60e51b815260206004820152602760248201527fe58faae69c894e4654e68ba5e69c89e88085e58fafe4bba5e8bf9be8a18ce7a26044820152664773c4c3f2c64b60c91b6064820152608401610ecc565b60008111611cd75760405162461bcd60e51b81526020600482015260166024820152750e4bbbde9a29de695b0e5bf85e9a1bbe5a4a7e4ba8e360541b6044820152606401610ecc565b6000918252601d6020908152604080842083815533855260010190915290912055565b611d0261303d565b601355565b611d0f61303d565b6000828152601a60205260409020805482919060ff19166001836003811115611d3a57611d3a6142fe565b02179055505050565b6000818152601b60205260409020600681015460ff16611d9a5760405162461bcd60e51b8152602060048201526012602482015271e8afa5e68b8de58d96e4b88de6b4bbe8b78360701b6044820152606401610ecc565b80600501544210611ddf5760405162461bcd60e51b815260206004820152600f60248201526ee68b8de58d96e5b7b2e7bb93e69d9f60881b6044820152606401610ecc565b80600301543411611e325760405162461bcd60e51b815260206004820152601e60248201527fe587bae4bbb7e4bd8ee4ba8ee5bd93e5898de69c80e9ab98e587bae4bbb700006044820152606401610ecc565b60048101546001600160a01b031615611e8757600481015460038201546040516001600160a01b039092169181156108fc0291906000818181858888f19350505050158015611e85573d6000803e3d6000fd5b505b34600382015560040180546001600160a01b0319163317905550565b6000838152601d60209081526040808320338452600101909152902054811115611f045760405162461bcd60e51b8152602060048201526012602482015271e68c81e69c89e4bbbde9a29de4b88de8b6b360701b6044820152606401610ecc565b6000838152601d6020908152604080832033845260010190915281208054839290611f30908490614a7d565b90915550506000838152601d602090815260408083206001600160a01b038616845260010190915281208054839290611f6a908490614b37565b9091555050505050565b33611f7e846119dd565b6001600160a01b031614611fe05760405162461bcd60e51b8152602060048201526024808201527fe58faae69c894e4654e68ba5e69c89e88085e58fafe4bba5e58f91e8b5b7e68b60448201526346f2c6cb60e11b6064820152608401610ecc565b6000838152601b602052604090206006015460ff16156120425760405162461bcd60e51b815260206004820152601b60248201527fe8bf99e59cba4e4654e68b8de58d96e5b7b2e8a2abe6bf80e6b4bb00000000006044820152606401610ecc565b6040805160e08101825233815260208101859052908101839052600060608201819052608082015260a081016120788342614b37565b8152600160209182018190526000958652601b8252604095869020835181546001600160a01b03199081166001600160a01b039283161783559385015192820192909255958301516002870155606083015160038701556080830151600487018054909316911617905560a0810151600585015560c001516006909301805460ff1916931515939093179092555050565b606060018054610dae906149ed565b6000818152601c60205260409020600481015460ff1661217a5760405162461bcd60e51b815260206004820152601b60248201527fe8afa54e4654e69caae5a484e4ba8ee587bae7a79fe78ab6e6808100000000006044820152606401610ecc565b8060030154816002015461218e9190614b37565b4210156121d55760405162461bcd60e51b8152602060048201526015602482015274e7a79fe8b581e69c9fe5b09ae69caae7bb93e69d9f60581b6044820152606401610ecc565b80546001600160a01b03166122215760405162461bcd60e51b8152602060048201526012602482015271e8afa54e4654e69caae8a2abe7a79fe8b58160701b6044820152606401610ecc565b805461223f906001600160a01b0316612239846119dd565b8461300b565b80546001600160a01b031916815560006002820155600401805460ff1916905550565b61226d33838361321f565b5050565b6014818154811061156557600080fd5b61228b3383613097565b6122a75760405162461bcd60e51b8152600401610ecc90614aa6565b6122b3848484846132ed565b50505050565b6000818152601b60205260409020600681015460ff1661230d5760405162461bcd60e51b815260206004820152600f60248201526ee68b8de58d96e5b7b2e7bb93e69d9f60881b6044820152606401610ecc565b80600501544210156123565760405162461bcd60e51b8152602060048201526012602482015271e68b8de58d96e5b09ae69caae7bb93e69d9f60701b6044820152606401610ecc565b60068101805460ff1916905560048101546001600160a01b03161561226d57612395612381836119dd565b60048301546001600160a01b03168461300b565b61239e826119dd565b6001600160a01b03166108fc82600301549081150290604051600060405180830381858888f19350505050158015610f6d573d6000803e3d6000fd5b601881815481106123ea57600080fd5b6000918252602090912001546001600160a01b0316905081565b6060610d9982613320565b61241761303d565b80518251146124685760405162461bcd60e51b815260206004820152601e60248201527fe59cb0e59d80e5928ce6af94e4be8be995bfe5baa6e4b88de58cb9e9858d00006044820152606401610ecc565b6000805b82518110156124ae5782818151811061248757612487614a51565b60200260200101518261249a9190614b37565b9150806124a681614af3565b91505061246c565b50606481111561250b5760405162461bcd60e51b815260206004820152602260248201527fe58886e7baa2e6af94e4be8be680bbe5928ce4b88de883bde8b685e8bf873130604482015261302560f01b6064820152608401610ecc565b825161251e90601890602086019061411e565b5081516122b3906019906020850190614183565b606060126000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156125c9576000848152602090819020604080516080810182526004860290920180546001600160a01b039081168452600180830154909116848601526002820154928401929092526003015460608301529083529092019101612567565b505050509050919050565b336125de846119dd565b6001600160a01b03161461263e5760405162461bcd60e51b815260206004820152602160248201527fe58faae69c89e68ba5e69c89e88085e6898de883bde58f91e8b5b7e68b8de58d6044820152604b60f91b6064820152608401610ecc565b6000838152601b602052604090206006015460ff16156120425760405162461bcd60e51b815260206004820152601b60248201527fe8afa5e78988e69d83e5b7b2e7bb8fe59ca8e68b8de58d96e4b8ad00000000006044820152606401610ecc565b6000848152600d602052604090205483146126cd5760405162461bcd60e51b8152600401610ecc90614b4a565b6126d982610258614b37565b4211156127225760405162461bcd60e51b8152602060048201526017602482015276151c985b9cd858dd1a5bdb881a185cc8195e1c1a5c9959604a1b6044820152606401610ecc565b600061272d856119dd565b60408051602081018890529081018690526001600160601b031933606090811b82168184015283901b1660748201526088810185905290915060009060a80160408051601f1981840301815291815281516020928301206000818152600e90935291205490915060ff16156127e45760405162461bcd60e51b815260206004820152601d60248201527f5472616e73616374696f6e20616c72656164792070726f6365737365640000006044820152606401610ecc565b6127ef818484613428565b6128365760405162461bcd60e51b8152602060048201526018602482015277496e76616c69642073656c6c6572207369676e617475726560401b6044820152606401610ecc565b84341461287c5760405162461bcd60e51b8152602060048201526014602482015273125b98dbdc9c9958dd081c1c9a58d9481cd95b9d60621b6044820152606401610ecc565b61288782338861300b565b6040516001600160a01b038316903480156108fc02916000818181858888f193505050501580156128bc573d6000803e3d6000fd5b506000818152600e602052604090819020805460ff19166001179055516001600160a01b03831690339088907fcc67c9df55afb3e8007bb6ac2d0263fcb716278a856040d1c94fe7fba4bac7ee90612920908a904290918252602082015260400190565b60405180910390a4505050505050565b61293861303d565b601755565b6000858152600d6020526040902054841461296a5760405162461bcd60e51b8152600401610ecc90614b4a565b61297683610258614b37565b4211156129bf5760405162461bcd60e51b8152602060048201526017602482015276151c985b9cd858dd1a5bdb881a185cc8195e1c1a5c9959604a1b6044820152606401610ecc565b60006129ca866119dd565b60408051602081018990529081018790526001600160601b031933606090811b82168184015283901b1660748201526088810186905260a8810185905290915060009060c80160408051601f1981840301815291815281516020928301206000818152600e90935291205490915060ff1615612a885760405162461bcd60e51b815260206004820152601d60248201527f5472616e73616374696f6e20616c72656164792070726f6365737365640000006044820152606401610ecc565b6000878152600f60205260409020548414612adc5760405162461bcd60e51b815260206004820152601460248201527309cdedcc6ca40c8decae640dcdee840dac2e8c6d60631b6044820152606401610ecc565b612ae7818484613428565b612b2e5760405162461bcd60e51b8152602060048201526018602482015277496e76616c69642073656c6c6572207369676e617475726560401b6044820152606401610ecc565b853414612b745760405162461bcd60e51b8152602060048201526014602482015273125b98dbdc9c9958dd081c1c9a58d9481cd95b9d60621b6044820152606401610ecc565b612b7f82338961300b565b6040516001600160a01b038316903480156108fc02916000818181858888f19350505050158015612bb4573d6000803e3d6000fd5b506000878152600f60205260408120805491612bcf83614af3565b90915550506000818152600e602052604090819020805460ff19166001179055516001600160a01b03831690339089907fcc67c9df55afb3e8007bb6ac2d0263fcb716278a856040d1c94fe7fba4bac7ee90612c37908b904290918252602082015260400190565b60405180910390a450505050505050565b6060600082516001600160401b03811115612c6557612c6561433c565b604051908082528060200260200182016040528015612c8e578160200160208202803683370190505b50905060005b8351811015612cef57612cc085858381518110612cb357612cb3614a51565b6020026020010151610f72565b828281518110612cd257612cd2614a51565b602090810291909101015280612ce781614af3565b915050612c94565b509392505050565b60126020528160005260406000208181548110612d1357600080fd5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b0392831695509116925084565b612d5161303d565b6001600160a01b038116612db65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610ecc565b611457816131cd565b33612dc9826119dd565b6001600160a01b031614612e295760405162461bcd60e51b815260206004820152602160248201527fe58faae69c894e4654e68c81e69c89e88085e58fafe4bba5e8bdace5a29e4e466044820152601560fa1b6064820152608401610ecc565b61226d33838361300b565b60006001600160e01b03198216632483248360e11b1480610d995750610d998261346c565b6000818152600260205260409020546001600160a01b03166114575760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610ecc565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612eed826119dd565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b61226d828260405180602001604052806000815250613491565b6000828152600260205260409020546001600160a01b0316612fbb5760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b6064820152608401610ecc565b6000828152600a60205260409020612fd38282614bdd565b506040518281527ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce79060200160405180910390a15050565b6130168383836134c4565b600090815260156020908152604080832042905560169091529020805460ff191690555050565b600b546001600160a01b03163314611c1c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610ecc565b6000806130a3836119dd565b9050806001600160a01b0316846001600160a01b031614806130ea57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b8061310e5750836001600160a01b031661310384610e31565b6001600160a01b0316145b949350505050565b61145781613635565b60005b60185481101561226d57600060646019838154811061314357613143614a51565b9060005260206000200154846131599190614b0c565b6131639190614b23565b90506018828154811061317857613178614a51565b60009182526020822001546040516001600160a01b039091169183156108fc02918491818181858888f193505050501580156131b8573d6000803e3d6000fd5b505080806131c590614af3565b915050613122565b600b80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316036132805760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610ecc565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6132f884848461300b565b61330484848484613675565b6122b35760405162461bcd60e51b8152600401610ecc90614c9c565b606061332b82612e59565b6000828152600a602052604081208054613344906149ed565b80601f0160208091040260200160405190810160405280929190818152602001828054613370906149ed565b80156133bd5780601f10613392576101008083540402835291602001916133bd565b820191906000526020600020905b8154815290600101906020018083116133a057829003601f168201915b5050505050905060006133db60408051602081019091526000815290565b905080516000036133ed575092915050565b81511561341f578082604051602001613407929190614cee565b60405160208183030381529060405292505050919050565b61310e84613776565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c849052603c81206001600160a01b0383169061310390856137e9565b60006001600160e01b0319821663780e9d6360e01b1480610d995750610d9982613805565b61349b8383613855565b6134a86000848484613675565b610f6d5760405162461bcd60e51b8152600401610ecc90614c9c565b826001600160a01b03166134d7826119dd565b6001600160a01b0316146134fd5760405162461bcd60e51b8152600401610ecc90614d1d565b6001600160a01b03821661355f5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610ecc565b61356c83838360016139ee565b826001600160a01b031661357f826119dd565b6001600160a01b0316146135a55760405162461bcd60e51b8152600401610ecc90614d1d565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b61363e816139fa565b6000818152600a602052604090208054613657906149ed565b159050611457576000818152600a60205260408120611457916141be565b60006001600160a01b0384163b1561376b57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906136b9903390899088908890600401614d62565b6020604051808303816000875af19250505080156136f4575060408051601f3d908101601f191682019092526136f191810190614d9f565b60015b613751573d808015613722576040519150601f19603f3d011682016040523d82523d6000602084013e613727565b606091505b5080516000036137495760405162461bcd60e51b8152600401610ecc90614c9c565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061310e565b506001949350505050565b606061378182612e59565b600061379860408051602081019091526000815290565b905060008151116137b85760405180602001604052806000815250610fa3565b806137c284613a9d565b6040516020016137d3929190614cee565b6040516020818303038152906040529392505050565b60008060006137f88585613b2f565b91509150612cef81613b74565b60006001600160e01b031982166380ac58cd60e01b148061383657506001600160e01b03198216635b5e139f60e01b145b80610d9957506301ffc9a760e01b6001600160e01b0319831614610d99565b6001600160a01b0382166138ab5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610ecc565b6000818152600260205260409020546001600160a01b0316156139105760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610ecc565b61391e6000838360016139ee565b6000818152600260205260409020546001600160a01b0316156139835760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610ecc565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6122b384848484613cbe565b6000613a05826119dd565b9050613a158160008460016139ee565b613a1e826119dd565b600083815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0385168085526003845282852080546000190190558785526002909352818420805490911690555192935084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60606000613aaa83613df2565b60010190506000816001600160401b03811115613ac957613ac961433c565b6040519080825280601f01601f191660200182016040528015613af3576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084613afd57509392505050565b6000808251604103613b655760208301516040840151606085015160001a613b5987828585613eca565b94509450505050613b6d565b506000905060025b9250929050565b6000816004811115613b8857613b886142fe565b03613b905750565b6001816004811115613ba457613ba46142fe565b03613bf15760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610ecc565b6002816004811115613c0557613c056142fe565b03613c525760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610ecc565b6003816004811115613c6657613c666142fe565b036114575760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610ecc565b6001811115613d2d5760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e7365637574697665207472604482015274185b9cd9995c9cc81b9bdd081cdd5c1c1bdc9d1959605a1b6064820152608401610ecc565b816001600160a01b038516613d8957613d8481600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b613dac565b836001600160a01b0316856001600160a01b031614613dac57613dac8582613f8e565b6001600160a01b038416613dc857613dc38161402b565b613deb565b846001600160a01b0316846001600160a01b031614613deb57613deb84826140da565b5050505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310613e315772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310613e5d576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310613e7b57662386f26fc10000830492506010015b6305f5e1008310613e93576305f5e100830492506008015b6127108310613ea757612710830492506004015b60648310613eb9576064830492506002015b600a8310610d995760010192915050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115613f015750600090506003613f85565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015613f55573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116613f7e57600060019250925050613f85565b9150600090505b94509492505050565b60006001613f9b84611b84565b613fa59190614a7d565b600083815260076020526040902054909150808214613ff8576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061403d90600190614a7d565b6000838152600960205260408120546008805493945090928490811061406557614065614a51565b90600052602060002001549050806008838154811061408657614086614a51565b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806140be576140be614a90565b6001900381819060005260206000200160009055905550505050565b60006140e583611b84565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b828054828255906000526020600020908101928215614173579160200282015b8281111561417357825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061413e565b5061417f9291506141f4565b5090565b828054828255906000526020600020908101928215614173579160200282015b828111156141735782518255916020019190600101906141a3565b5080546141ca906149ed565b6000825580601f106141da575050565b601f01602090049060005260206000209081019061145791905b5b8082111561417f57600081556001016141f5565b6001600160e01b03198116811461145757600080fd5b60006020828403121561423157600080fd5b8135610fa381614209565b60005b8381101561425757818101518382015260200161423f565b50506000910152565b6000815180845261427881602086016020860161423c565b601f01601f19169290920160200192915050565b602081526000610fa36020830184614260565b6000602082840312156142b157600080fd5b5035919050565b80356001600160a01b03811681146142cf57600080fd5b919050565b600080604083850312156142e757600080fd5b6142f0836142b8565b946020939093013593505050565b634e487b7160e01b600052602160045260246000fd5b602081016004831061433657634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561437a5761437a61433c565b604052919050565b600082601f83011261439357600080fd5b81356001600160401b038111156143ac576143ac61433c565b6143bf601f8201601f1916602001614352565b8181528460208386010111156143d457600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121561440457600080fd5b61440d836142b8565b915060208301356001600160401b0381111561442857600080fd5b61443485828601614382565b9150509250929050565b60008060006060848603121561445357600080fd5b505081359360208301359350604090920135919050565b60008060006060848603121561447f57600080fd5b614488846142b8565b9250614496602085016142b8565b9150604084013590509250925092565b60006001600160401b038211156144bf576144bf61433c565b5060051b60200190565b600082601f8301126144da57600080fd5b813560206144ef6144ea836144a6565b614352565b82815260059290921b8401810191818101908684111561450e57600080fd5b8286015b8481101561453057614523816142b8565b8352918301918301614512565b509695505050505050565b6000806040838503121561454e57600080fd5b82356001600160401b038082111561456557600080fd5b614571868387016144c9565b9350602085013591508082111561458757600080fd5b5061443485828601614382565b6000806000606084860312156145a957600080fd5b83359250614496602085016142b8565b6000602082840312156145cb57600080fd5b610fa3826142b8565b600080604083850312156145e757600080fd5b823591506145f7602084016142b8565b90509250929050565b6000806040838503121561461357600080fd5b50508035926020909101359150565b6000806040838503121561463557600080fd5b8235915060208301356004811061464b57600080fd5b809150509250929050565b6000806040838503121561466957600080fd5b614672836142b8565b91506020830135801515811461464b57600080fd5b6000806000806080858703121561469d57600080fd5b6146a6856142b8565b93506146b4602086016142b8565b92506040850135915060608501356001600160401b038111156146d657600080fd5b6146e287828801614382565b91505092959194509250565b6000806040838503121561470157600080fd5b82356001600160401b038082111561471857600080fd5b614724868387016144c9565b935060209150818501358181111561473b57600080fd5b85019050601f8101861361474e57600080fd5b803561475c6144ea826144a6565b81815260059190911b8201830190838101908883111561477b57600080fd5b928401925b8284101561479957833582529284019290840190614780565b80955050505050509250929050565b602080825282518282018190526000919060409081850190868401855b8281101561480b57815180516001600160a01b039081168652878201511687860152858101518686015260609081015190850152608090930192908501906001016147c5565b5091979650505050505050565b6000806000806080858703121561482e57600080fd5b84359350602085013592506040850135915060608501356001600160401b038111156146d657600080fd5b6000806040838503121561486c57600080fd5b614875836142b8565b91506145f7602084016142b8565b600080600080600060a0868803121561489b57600080fd5b8535945060208601359350604086013592506060860135915060808601356001600160401b038111156148cd57600080fd5b6148d988828901614382565b9150509295509295909350565b600080604083850312156148f957600080fd5b614902836142b8565b91506020808401356001600160401b038082111561491f57600080fd5b818601915086601f83011261493357600080fd5b81356149416144ea826144a6565b81815260059190911b8301840190848101908983111561496057600080fd5b8585015b838110156149985780358581111561497c5760008081fd5b61498a8c89838a0101614382565b845250918601918601614964565b508096505050505050509250929050565b6020808252825182820181905260009190848201906040850190845b818110156149e1578351835292840192918401916001016149c5565b50909695505050505050565b600181811c90821680614a0157607f821691505b602082108103614a2157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601260045260246000fd5b600082614a4c57614a4c614a27565b500690565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b81810381811115610d9957610d99614a67565b634e487b7160e01b600052603160045260246000fd5b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b600060018201614b0557614b05614a67565b5060010190565b8082028115828204841417610d9957610d99614a67565b600082614b3257614b32614a27565b500490565b80820180821115610d9957610d99614a67565b60208082526025908201527f507269636520646f6573206e6f74206d6174636820746865206c697374656420604082015264707269636560d81b606082015260800190565b601f821115610f6d57600081815260208120601f850160051c81016020861015614bb65750805b601f850160051c820191505b81811015614bd557828155600101614bc2565b505050505050565b81516001600160401b03811115614bf657614bf661433c565b614c0a81614c0484546149ed565b84614b8f565b602080601f831160018114614c3f5760008415614c275750858301515b600019600386901b1c1916600185901b178555614bd5565b600085815260208120601f198616915b82811015614c6e57888601518255948401946001909101908401614c4f565b5085821015614c8c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60008351614d0081846020880161423c565b835190830190614d1481836020880161423c565b01949350505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090614d9590830184614260565b9695505050505050565b600060208284031215614db157600080fd5b8151610fa38161420956fea264697066735822122064f4e010c6a3ea66c62914075dbfe6445ce5c07c4260b32dc78ab4879a2262dd64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 166,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 168,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 172,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 176,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 180,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 186,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1216,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1220,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1223,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1227,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1571,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 7,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_owner",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 3831,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "tokenIdCounter",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(Counter)2135_storage"
      },
      {
        "astId": 3835,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "tokenPrices",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3839,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "usedHashes",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 3843,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "nonces",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3847,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_creators",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3850,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "royaltyPercentage",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 3856,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "tokenTransactionHistory",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_array(t_struct(TransactionHistory)4335_storage)dyn_storage)"
      },
      {
        "astId": 3859,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "mysteryBoxPrice",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 3862,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "availableTokens",
        "offset": 0,
        "slot": "20",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3866,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "holdingStartTime",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3870,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "loyaltyRewardClaimed",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 3873,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "loyaltyPeriod",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 3876,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "profitSharingAddresses",
        "offset": 0,
        "slot": "24",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3879,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "profitSharingPercentages",
        "offset": 0,
        "slot": "25",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 4326,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "tokenRarities",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_uint256,t_enum(Rarity)4321)"
      },
      {
        "astId": 4355,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "auctions",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_uint256,t_struct(Auction)4350_storage)"
      },
      {
        "astId": 4371,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "rentals",
        "offset": 0,
        "slot": "28",
        "type": "t_mapping(t_uint256,t_struct(Rental)4366_storage)"
      },
      {
        "astId": 4383,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "fractionalOwnerships",
        "offset": 0,
        "slot": "29",
        "type": "t_mapping(t_uint256,t_struct(FractionalOwnership)4378_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(TransactionHistory)4335_storage)dyn_storage": {
        "base": "t_struct(TransactionHistory)4335_storage",
        "encoding": "dynamic_array",
        "label": "struct YourCollectible.TransactionHistory[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(Rarity)4321": {
        "encoding": "inplace",
        "label": "enum YourCollectible.Rarity",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_struct(TransactionHistory)4335_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct YourCollectible.TransactionHistory[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(TransactionHistory)4335_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_enum(Rarity)4321)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => enum YourCollectible.Rarity)",
        "numberOfBytes": "32",
        "value": "t_enum(Rarity)4321"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Auction)4350_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct YourCollectible.Auction)",
        "numberOfBytes": "32",
        "value": "t_struct(Auction)4350_storage"
      },
      "t_mapping(t_uint256,t_struct(FractionalOwnership)4378_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct YourCollectible.FractionalOwnership)",
        "numberOfBytes": "32",
        "value": "t_struct(FractionalOwnership)4378_storage"
      },
      "t_mapping(t_uint256,t_struct(Rental)4366_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct YourCollectible.Rental)",
        "numberOfBytes": "32",
        "value": "t_struct(Rental)4366_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Auction)4350_storage": {
        "encoding": "inplace",
        "label": "struct YourCollectible.Auction",
        "members": [
          {
            "astId": 4337,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "seller",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4339,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "tokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4341,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "minBid",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4343,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "highestBid",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4345,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "highestBidder",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 4347,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "endTime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4349,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "active",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Counter)2135_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2134,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(FractionalOwnership)4378_storage": {
        "encoding": "inplace",
        "label": "struct YourCollectible.FractionalOwnership",
        "members": [
          {
            "astId": 4373,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "totalShares",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4377,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "sharesOwned",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Rental)4366_storage": {
        "encoding": "inplace",
        "label": "struct YourCollectible.Rental",
        "members": [
          {
            "astId": 4357,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "renter",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4359,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "rentPrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4361,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "startTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4363,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "duration",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4365,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "active",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(TransactionHistory)4335_storage": {
        "encoding": "inplace",
        "label": "struct YourCollectible.TransactionHistory",
        "members": [
          {
            "astId": 4328,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "seller",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4330,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "buyer",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4332,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4334,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "timestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}